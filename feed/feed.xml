<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>perch posts</title>
  <subtitle>posts by perchbird</subtitle>
  <link href="https://blog.perchbird.dev/feed/feed.xml" rel="self" />
  <link href="https://blog.perchbird.dev/" />
  <updated>2025-07-09T00:00:00Z</updated>
  <id>https://blog.perchbird.dev/</id>
  <author>
    <name>perchbird</name>
  </author>
  <entry>
    <title>From Scratch: Berry Patch</title>
    <link href="https://blog.perchbird.dev/posts/from-scratch-berry-patch/" />
    <updated>2025-07-09T00:00:00Z</updated>
    <id>https://blog.perchbird.dev/posts/from-scratch-berry-patch/</id>
    <content type="html">&lt;p&gt;Recently, I learned that Pokémon Ruby and Sapphire were affected by a clock-related bug. After 366 days of gameplay, clock-based events ceased to function, as if time had stopped. If a player waited one year after the bug began, it would actually fix itself. Even more interesting to me was that a number of Pokémon games released after Ruby and Sapphire included a &amp;quot;Berry Program Update&amp;quot; that could be sent to the Ruby or Sapphire game cartridge to fix this bug either before it happened or while it was happening. I had searched online for more information, but the few explanations of the bug and the Berry Patch that I did find weren&#39;t technical enough for my liking. On the other hand, I didn&#39;t look too hard for explanations because I wanted to explore it myself. Let&#39;s get started!&lt;/p&gt;
&lt;h1 id=&quot;what-happens&quot;&gt;What Happens&lt;/h1&gt;
&lt;p&gt;On Nintendo&#39;s official website, they state:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Pokémon Ruby and Pokémon Sapphire, certain berry trees will stop producing berries after you&#39;ve played your game for one year. All main game play activities, such as collecting and battling Pokémon, are not affected. If you want to keep the berries growing after a year of game play, please use the information below to find out how to update your game pak.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bulbapedia.bulbagarden.net/wiki/Berry_glitch#Explanation&quot;&gt;Bulbapedia&lt;/a&gt; has a lot more information:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The game cartridge contains a real-time clock (RTC) which keeps track of the year, month, day, hour, minute, second, and day of the week. When the RTC is first turned on, its date is set to January 1, 2000. Because the game has no need for an actual calendar system, it converts the RTC&#39;s year, month, and day data into a single &amp;quot;day number&amp;quot;. The conversion function has a flaw, however: it will only count years (adding 365 or 366 days for each year or leap year) starting from 2001. So, while the RTC clock is reporting the year as 2000 or 2001, in both cases, the conversion equates this to &amp;quot;add 0 days to the day number&amp;quot;. This means that, for the first 366 days the RTC runs (starting from January 1, 2000), the game&#39;s day number will count from 1 to 366 normally, but when the RTC clock reports January 1, 2001, the game&#39;s day number will start from 1 again.&lt;br&gt;
If, for example, a Sitrus Berry was planted on December 31, 2000 according to the RTC, which the game interprets as day 366, it will be scheduled to be fully grown on day 367. Due to the glitch, day 367 will not happen until the RTC reaches January 2, 2002. The result is that the growth of the Berry appears to be frozen for 366 days. Other effects of this glitch include:&lt;br&gt;
- Random events which are calculated once per day, including the random number for Mirage Island and weather conditions on Route 119 and Route 123, along with random events which must be announced on TV, such as the Energy Guru and Lilycove Dept. Store sales and service days at the Mauville Game Corner, will be frozen until 366 days after the game was last played before the glitch took effect.&lt;br&gt;
- Drawings at the Pokémon Lottery Corner, NPCs who offer free Berries daily, and the man in Pacifidlog Town who gives TM27 (Return) or TM21 (Frustration) weekly will be frozen until 366 days after these events were last used.&lt;br&gt;
- The number of successful rocket launches at the Mossdeep Space Center will be reset to 1.&lt;br&gt;
The glitch does not affect the Evolution of Eevee into Espeon or Umbreon or the tides in Shoal Cave because these events are based only on the current time, not the day number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given this, let&#39;s lay out the facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cartridge contains a real time clock (RTC) which initializes itself to January 1, 2000, and continues counting upwards until it loses power or is set otherwise&lt;/li&gt;
&lt;li&gt;Ruby and Sapphire store a day number in the save file which is used to determine if a day has elapsed&lt;/li&gt;
&lt;li&gt;Ruby and Sapphire have a flaw in this day number calculation that effectively treats 2000 and 2001 as the same year (+0 days)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An interesting observation here is that any cartridge that hasn&#39;t had its battery replaced (and still works) is safe - but it&#39;s not a very good idea, considering that if you do replace the battery after beginning a new save, you will have to wait the difference between Jan 1, 2000 and the date of your last save in order for daily events to work again. If you truly would like to play Ruby or Sapphire on a game cartridge these days, it would be best to replace the battery prior to beginning your adventure.&lt;/p&gt;
&lt;h1 id=&quot;surface-level&quot;&gt;Surface Level&lt;/h1&gt;
&lt;p&gt;There are a number of ways to fix the bug in any given Ruby or Sapphire cartridge. From &lt;a href=&quot;https://bulbapedia.bulbagarden.net/wiki/Berry_glitch#Fixing_the_glitch&quot;&gt;Bulbapedia&lt;/a&gt;, you can patch via Pokémon FireRed, LeafGreen, Emerald, Pokémon Colosseum/XD, Pokémon Channel (PAL only), Pokémon Box, e-Reader (Japan only), a GameCube Demo exclusive to retailers, a GBA cartridge exclusive to retailers, or, finally, sending your cartridge directly to Nintendo, a service which they discontinued in 2012. I&#39;d like to take a look at the patch provided by Pokémon Emerald, see how it works, why it works, and what it does in different scenarios.&lt;/p&gt;
&lt;h2 id=&quot;getting-an-emulator-ready&quot;&gt;Getting an Emulator Ready&lt;/h2&gt;
&lt;p&gt;There are a number of modern emulators with high accuracy and functionality that mimic what&#39;s required to perform the Berry Patch, or &amp;quot;Berry Program Update&amp;quot;, as Nintendo/Game Freak call it (I will refer to it as Berry Patch from here on). I attempted to perform the update with VisualBoyAdvance, but I could not get the emulator to transfer the Berry Patch to the 2nd emulated GBA. Thankfully, this did work on the mGBA emulator. The steps are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obtain mGBA. I used 0.10.5&lt;/li&gt;
&lt;li&gt;Obtain a GBA BIOS file. This is required, as the berry program transfers during the GBA BIOS startup. Set the BIOS file in mGBA&lt;/li&gt;
&lt;li&gt;Start mGBA, and select &amp;quot;File &amp;gt; New multiplayer window&amp;quot;, which will open a new window&lt;/li&gt;
&lt;li&gt;In the original window, start Pokémon FireRed/LeafGreen/Emerald&lt;/li&gt;
&lt;li&gt;In the second window, start Pokémon Ruby/Sapphire&lt;/li&gt;
&lt;li&gt;Let both games get to the title screen&lt;/li&gt;
&lt;li&gt;On Emerald, press SELECT + B at the same time. You can press A through the rest of the screens&lt;/li&gt;
&lt;li&gt;On Ruby, press START + SELECT and hold them down, then press CTRL + R (or your Reset hotkey) while still holding down START + SELECT&lt;/li&gt;
&lt;li&gt;FR/LG/E should be showing a &amp;quot;transmitting&amp;quot; screen, and R/S should be showing a flashing Nintendo logo beneath the GAME BOY text&lt;/li&gt;
&lt;li&gt;Finally, R/S should show text stating &amp;quot;The Berry Program Update will now begin...&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s important to note that your save slot depends on which &amp;quot;player&amp;quot; your emulator is. When you open a multiplayer window in mGBA, &amp;quot;player 1&amp;quot; is the first window, and &amp;quot;player 2&amp;quot; is the second. These are different save slots. If you open mGBA, run through the opening scene, save, and then perform the above steps, your save file will only be recognized by the mGBA that is actually running FR/LG/E at the time. The second mGBA instance (player 2) will not recognize a save file at all.&lt;/p&gt;
&lt;p&gt;So what are the different scenarios?&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Save Date&lt;/th&gt;
&lt;th&gt;RTC Date of Patching&lt;/th&gt;
&lt;th&gt;Berry Patch Output&lt;/th&gt;
&lt;th&gt;RTC Date Set To&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;No Save&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&amp;quot;Unable to update Berry Program.&amp;quot;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-01 (1)&lt;/td&gt;
&lt;td&gt;2000-01-01 (1)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated.&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-01-01 (1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated.&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-06-02 (153)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;2001-06-01 (152)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program.&amp;quot;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;2000-03-01 (61)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated.&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-03-02 (61)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;2001-03-01 (60)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program.&amp;quot;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated.&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-01-15 (15)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated.&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-01-15 (15)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;2001-01-10 (10)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program.&amp;quot;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;2001-01-15 (15)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program.&amp;quot;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;2001-01-20 (20)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program.&amp;quot;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated.&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-12-16 (350)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;2000-12-31 (366)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated.&amp;quot;&lt;/td&gt;
&lt;td&gt;2002-01-01 (732)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;2001-01-01 (1)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program.&amp;quot;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;2001-01-15 (15)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program.&amp;quot;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Note that the day value next to the date is how the code in Pokémon Ruby interprets the date into a single number, as described above.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I think I&#39;ve seen enough. Honestly, it looks like a basic update, where &lt;code&gt;if year == 2000: day += 366&lt;/code&gt;. This is surprising to me, as Bulbapedia claims:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the game is already affected by the Berry glitch, these programs will set the RTC forward to January 2, 2002, the date at which all effects of the glitch end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does the fix check for active berries or something? If it does, why does it update saves in 2000 to 2001? If it doesn&#39;t, then why doesn&#39;t it update 2001 saves with a lower day value to some later date? These last few scenarios are really surprising to me. You&#39;re telling me I could get into a situation where I saved ~360 days into a game&#39;s RTC becoming active, and if I don&#39;t apply the Berry Patch within the next &lt;em&gt;few weeks&lt;/em&gt;, I&#39;m locked out of berry events for almost a year? Even with the &amp;quot;fix&amp;quot;? And why did we never observe the &amp;quot;January 1st, 2002&amp;quot; behavior Bulbapedia described? Now I&#39;m really interested.&lt;/p&gt;
&lt;h1 id=&quot;hm08-ing-deeper&quot;&gt;HM08&#39;ing Deeper&lt;/h1&gt;
&lt;p&gt;There&#39;s a few things I neglected to explain above, because anything from here on out is going to get far more technical.&lt;/p&gt;
&lt;p&gt;In order to actually investigate this, I&#39;ve been using the mGBA emulator. At first, I was very curious as to how this fix worked. When I heard about it initially, I was thinking there was some kind of binary patch applied to the game to actually fix the logic. The above references to Bulbapedia cleared that up immediately, though, and specified that the fix took place by modifying the real-time clock on the game cartridge itself. When it comes down to it, a lot of games didn&#39;t use a real-time clock. The ones that did surely didn&#39;t often, if ever, set that real-time clock. For example, when you set the clock upstairs at your house in R/S/E, the game simply uses that as a baseline for future timed events like Shoal Cave which rely on a specific time of day; it doesn&#39;t set the RTC&#39;s time to the provided value.&lt;/p&gt;
&lt;p&gt;So as an emulator developer, what makes the most sense? Do you emulate the bespoke behavior of starting at 2000-01-01 and counting up indefinitely from there somehow like a real cartridge would? Or do you just use... the real-time clock... built into the device you&#39;re running the emulator on? Let&#39;s say you&#39;re using the user&#39;s computer as the source for the RTC. What happens when a game writes to the RTC? You obviously can&#39;t (or shouldn&#39;t) write to the user&#39;s computer&#39;s date and time. mGBA handles this by ignoring RTC writes entirely.&lt;/p&gt;
&lt;p&gt;While mGBA does have custom RTC settings that I could use, I only learned about them after writing this entire post. So I used a great piece of software called RunAsDate which runs a program as if it&#39;s a certain date you specify, which works as expected on mGBA. Now that I can save on certain days and run the Berry Patch on others, the next thing we need is a way to figure out how to see what the Berry Patch is doing to the RTC.&lt;/p&gt;
&lt;p&gt;Many hours, one S3511A datasheet, many comments to ensure I&#39;m still sane, a few changes and a lot of logging later, I have some adjustments to the mGBA source that will log input commands just as it logs output commands:&lt;/p&gt;
&lt;!-- mGBA Diff --&gt;
&lt;pre class=&quot;language-diff&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;index eb5328346..fff5d3b03 100644
&lt;span class=&quot;token coord&quot;&gt;--- a/src/gba/cart/gpio.c&lt;/span&gt;
&lt;span class=&quot;token coord&quot;&gt;+++ b/src/gba/cart/gpio.c&lt;/span&gt;
@@ -137,42 +137,59 @@ void _outputPins(struct GBACartridgeHardware* hw, unsigned pins) {
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;void _rtcReadPins(struct GBACartridgeHardware* hw) {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       // Transfer sequence:
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       //   SCK SIO  CS
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       // P: 0 | 1 |  2 | 3
&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;       // == Initiate
&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;       // &gt; HI | - | LO | -
&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;       // &gt; HI | - | HI | -
&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;       // == Transfer bit (x8)
&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;       // &gt; LO | x | HI | -
&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;       // &gt; HI | - | HI | -
&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;       // &amp;lt; ?? | x | ?? | -
&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;       // == Terminate
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       // == Initiate - step 0, CS lo -&gt; hi
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       // &gt; HI | - | LO | - | 1
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       // &gt; HI | - | HI | - | 5
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       // == Transfer bit (x8) - step 1, SCK lo -&gt; hi
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       // &gt; LO | x | HI | - | 4 = 0 bit, 6 = 1 bit
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       // &gt; HI | - | HI | - | 5
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       // &amp;lt; ?? | x | ?? | - |
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;       // == Terminate - CS low
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       // &gt;  - | - | LO | -
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       switch (hw-&gt;rtc.transferStep) {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       case 0:
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;               // SCK HI
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               if ((hw-&gt;pinState &amp;amp; 5) == 1) {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       hw-&gt;rtc.transferStep = 1;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               }
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               break;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       case 1:
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;               // SCK, CS HI
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               if ((hw-&gt;pinState &amp;amp; 5) == 5) {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       hw-&gt;rtc.transferStep = 2;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;               // CS LO - abort
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               } else if ((hw-&gt;pinState &amp;amp; 5) != 1) {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       hw-&gt;rtc.transferStep = 0;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               }
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               break;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       case 2:
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;               // if SCK lo - read bit
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               if (!(hw-&gt;pinState &amp;amp; 1)) {
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                       // empty the msb we haven&#39;t yet read
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       hw-&gt;rtc.bits &amp;amp;= ~(1 &amp;lt;&amp;lt; hw-&gt;rtc.bitsRead);
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                       // read the new bit from SIO and shift it into the correct position
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       hw-&gt;rtc.bits |= ((hw-&gt;pinState &amp;amp; 2) &gt;&gt; 1) &amp;lt;&amp;lt; hw-&gt;rtc.bitsRead;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;               // if SCK hi -
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               } else {
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                       // CS hi, communication is not done
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       if (hw-&gt;pinState &amp;amp; 4) {
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                               // the current command is a write command OR command is not set
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                               if (!RTCCommandDataIsReading(hw-&gt;rtc.command)) {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                       ++hw-&gt;rtc.bitsRead;
&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;                                       if (hw-&gt;rtc.bitsRead == 8) {
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                                       if (hw-&gt;rtc.bitsRead % 8 == 0) {
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                               _rtcProcessByte(hw);
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                       }
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                               // the command is a read command
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                               } else {
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                                       // set output pins for game to read
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                       _outputPins(hw, 5 | (_rtcOutput(hw) &amp;lt;&amp;lt; 1));
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                       ++hw-&gt;rtc.bitsRead;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                       if (hw-&gt;rtc.bitsRead == 8) {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                               --hw-&gt;rtc.bytesRemaining;
&lt;/span&gt;@@ -183,6 +200,7 @@ void _rtcReadPins(struct GBACartridgeHardware* hw) {
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                               hw-&gt;rtc.bitsRead = 0;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                                       }
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                               }
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                       // CS lo - we are done, clean up
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       } else {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                               hw-&gt;rtc.bitsRead = 0;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                               hw-&gt;rtc.bytesRemaining = 0;
&lt;/span&gt;@@ -206,7 +224,7 @@ void _rtcProcessByte(struct GBACartridgeHardware* hw) {

&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       hw-&gt;rtc.bytesRemaining = RTC_BYTES[RTCCommandDataGetCommand(command)];
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       hw-&gt;rtc.commandActive = hw-&gt;rtc.bytesRemaining &gt; 0;
&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;                       mLOG(GBA_HW, DEBUG, &quot;Got RTC command %x&quot;, RTCCommandDataGetCommand(command));
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                       mLOG(GBA_HW, DEBUG, &quot;Got RTC command %x %x | bits: %04X&quot;, RTCCommandDataGetCommand(command), RTCCommandDataGetReading(command), hw-&gt;rtc.bits);
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       switch (RTCCommandDataGetCommand(command)) {
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       case RTC_RESET:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                               hw-&gt;rtc.control = 0;
&lt;/span&gt;@@ -228,11 +246,13 @@ void _rtcProcessByte(struct GBACartridgeHardware* hw) {
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       hw-&gt;rtc.control = hw-&gt;rtc.bits;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       break;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               case RTC_FORCE_IRQ:
&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;                       mLOG(GBA_HW, STUB, &quot;Unimplemented RTC command %u&quot;, RTCCommandDataGetCommand(hw-&gt;rtc.command));
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                       mLOG(GBA_HW, STUB, &quot;Unimplemented RTC command FORCE_IRQ&quot;);
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       break;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               case RTC_RESET:
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                       mLOG(GBA_HW, STUB, &quot;Unimplemented RTC command RESET&quot;);
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               case RTC_DATETIME:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               case RTC_TIME:
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                       mLOG(GBA_HW, STUB, &quot;RTC command %02X input byte %02X&quot;, RTCCommandDataGetCommand(hw-&gt;rtc.command), hw-&gt;rtc.bits);
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       break;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               }
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;ll notice that the only substantial changes here are a lot of comments for my understanding (I&#39;m not a hardware guy...) and the handler for &lt;code&gt;RTC_TIME&lt;/code&gt; in &lt;code&gt;_rtcProcessByte&lt;/code&gt;. I am not sure if my change to &lt;code&gt;if (hw-&amp;gt;rtc.bitsRead % 8 == 0) {&lt;/code&gt; is necessary, but it made sense at the time... I think.&lt;/p&gt;
&lt;p&gt;Anyways, now we get some nice output when the Berry Patch attempts to adjust the realtime clock:&lt;/p&gt;
&lt;!-- Original (read operation) --&gt;
&lt;pre&gt;&lt;code&gt;[DEBUG] GBA Pak Hardware:	Got RTC command 2 1 | bits: 00A6
[DEBUG] GBA Pak Hardware:	RTC output byte 00
[DEBUG] GBA Pak Hardware:	RTC output byte 12
[DEBUG] GBA Pak Hardware:	RTC output byte 31
[DEBUG] GBA Pak Hardware:	RTC output byte 00
[DEBUG] GBA Pak Hardware:	RTC output byte 00
[DEBUG] GBA Pak Hardware:	RTC output byte 00
[DEBUG] GBA Pak Hardware:	RTC output byte 49
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- New (write operation) --&gt;
&lt;pre&gt;&lt;code&gt;[DEBUG] GBA Pak Hardware:	Got RTC command 2 0 | bits: 0026
[STUB] GBA Pak Hardware:	RTC command 02 input byte 02
[STUB] GBA Pak Hardware:	RTC command 02 input byte 01
[STUB] GBA Pak Hardware:	RTC command 02 input byte 01
[STUB] GBA Pak Hardware:	RTC command 02 input byte 00
[STUB] GBA Pak Hardware:	RTC command 02 input byte 00
[STUB] GBA Pak Hardware:	RTC command 02 input byte 00
[STUB] GBA Pak Hardware:	RTC command 02 input byte 49
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;By the way, if you&#39;re trying to build mGBA, just &lt;a href=&quot;https://github.com/mgba-emu/mgba#docker-building&quot;&gt;build it in Docker&lt;/a&gt;. Save yourself.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can see this is from the above example, running the berry program on 2000-12-31, which set the date to 2002-01-01. The RTC uses a single byte for the year. That means it stores only the years since 2000, so 2000 is 00 and 2001 is 01. There&#39;s only one more thing to do, which is examine the day value code to see how the game determines the single value to store to determine if a day has passed. It&#39;s Ghidra time! Using the wonderful &lt;a href=&quot;https://github.com/pudii/gba-ghidra-loader&quot;&gt;GBA Loader&lt;/a&gt; Ghidra plugin, we can pop open the ROM files for the games without having to do a lot of manual stuff to get it to analyze properly. Once analysis is done, we only really have one problem. Where do we look?&lt;/p&gt;
&lt;h2 id=&quot;i-m-not-cheating-i-m-just-setting-my-rtc-forward&quot;&gt;I&#39;m Not Cheating, I&#39;m Just Setting My RTC Forward&lt;/h2&gt;
&lt;p&gt;If you haven&#39;t noticed yet, the steps I&#39;m writing aren&#39;t necessarily in the order I did them or researched them. In fact, the very first thing I did was what I&#39;m about to describe. The first thing I wanted to look at once I learned the &amp;quot;berry update program&amp;quot; simply adjusted the real-time clock was compare the v1.1 and v1.2 ROM files for Ruby to see what the actual code fix involved. Doing just that, we get the following:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/16ilCVnzrz-1855.avif 1855w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/16ilCVnzrz-1855.webp 1855w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/16ilCVnzrz-1855.png&quot; alt=&quot;A comparison of the 1.1 and 1.2 Pokémon Ruby ROM files in a hex editor&quot; width=&quot;1855&quot; height=&quot;1235&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Okay, 3 differences, 2 bytes near the beginning, then a huge chunk of the same content, then two single-byte differences 35 bytes apart from each other. The beginning bytes are likely a game version. The two changes later are likely what we&#39;re after. Let&#39;s go to that address in Ghidra in each ROM. The executable section seems to start at 0x8000000, and our differences start at +0x919B. Let&#39;s go to 0x800919B.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/iKcZJC6IuH-2023.avif 2023w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/iKcZJC6IuH-2023.webp 2023w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/iKcZJC6IuH-2023.png&quot; alt=&quot;Ghidra, showing the disassembly of both 1.1 and 1.2 ROMs.&quot; width=&quot;2023&quot; height=&quot;957&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;See it? The only two changes? Yep. Two branch conditions. Two incorrect branch conditions caused Game Freak to have to produce this patching code, put it into as many places as they could and also ship a new revision of the game cartridge to fix. Two branch conditions. But what do they do? Let&#39;s look at the function:&lt;/p&gt;
&lt;!-- rtcDateToDayValue --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;ulonglong &lt;span class=&quot;token function&quot;&gt;rtcDateToDayValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint year&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; uint month&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; uint day&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; leap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; monthIndex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  dword currentMonthMaxDays&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  dword &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;monthDaysPtr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  uint yearToDays&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  uint yearVal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  yearToDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  yearVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; year&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yearVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; yearVal &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;yearVal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    yearToDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; yearToDays &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    leap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isLeapYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yearVal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;leap &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      yearToDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; yearToDays &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// S3511 has jan as month 1&lt;/span&gt;
  monthIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; month &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// accumulate days in previous months&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;monthIndex &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    monthDaysPtr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; daysPerMonth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      currentMonthMaxDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;monthDaysPtr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      monthDaysPtr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; monthDaysPtr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      yearToDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; yearToDays &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; currentMonthMaxDays&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      monthIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; monthIndex &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;monthIndex &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// if current year is a leap year and we&#39;re past feb 29th&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;month &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;leap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isLeapYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; leap &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    yearToDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; yearToDays &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; yearToDays &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; day&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve cleaned up this function with proper variable and function labels. Assuming &lt;code&gt;daysPerMonth&lt;/code&gt; is an array with the number of days in each month and &lt;code&gt;isLeapYear&lt;/code&gt; functions properly, this function will give you the number of days since 0, 0, 0. Unless... your year is 1!&lt;/p&gt;
&lt;!-- Broken year condition --&gt;
&lt;pre class=&quot;language-C&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-C&quot;&gt;while (yearVal = yearVal - 1, 0 &lt; (int)yearVal) {&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the year is 2001, the function receives &lt;code&gt;1&lt;/code&gt; for the year. It immediately subtracts 1 from it and only processes the year&#39;s days if it&#39;s still greater than 0, resulting in both 2000 and 2001 adding zero days from this block of code. How did Game Freak fix this in the revised ROM?&lt;/p&gt;
&lt;!-- Fixed year condition --&gt;
&lt;pre class=&quot;language-C&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-C&quot;&gt;while (yearVal = yearVal - 1, -1 &lt; (int)yearVal) {&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well. That works.&lt;/p&gt;
&lt;p&gt;Anyways, given this code, we now have the three things we needed to create the table all the way up in the first part of this post. We can save on specific days, apply the patch on specific days, see what the RTC is being set to, and we can accurately determine the day value for any given day. That&#39;s everything that brought us to where we are and allowed us to observe the odd behavior of the patch in the table above. What&#39;s next?&lt;/p&gt;
&lt;h1 id=&quot;the-berry-patch&quot;&gt;The Berry Patch&lt;/h1&gt;
&lt;p&gt;I think the next step will have to be analyzing the Berry Patch code and check its decision logic to see how it decides when and how far to move the RTC forward. The first step to analyzing the Berry Patch ROM is, well, finding the ROM. Since the Berry Patch is not its own cartridge that you plug into the GBA, getting our hands on it for analysis is not going to be straightforward.&lt;/p&gt;
&lt;p&gt;There are two ways I can think of to obtain the Berry Patch ROM. One is analyzing the data sent over the link cable during boot when running the Berry Patch on the Pokémon Ruby emulator. Even if we did log everything coming over the wire, not only is there a lot of data, but there&#39;s likely a lot of communication protocol cruft that we don&#39;t need and will be a pain to sift through. The other method is via analyzing the Pokémon Emerald ROM. It has to be in there somewhere, and it&#39;s likely much easier to do compared to the link cable method. Let&#39;s try and find it that way.&lt;/p&gt;
&lt;p&gt;The Ghidra GBA Loader plugin linked above mentions a resource for GBA documentation, &lt;a href=&quot;https://problemkaputt.de/gbatek.htm&quot;&gt;GBATEK&lt;/a&gt;. We know that we&#39;re transmitting executable code over the link cable from system A to system B. System A is running a game and system B is in the BIOS. GBATEK has a full section on GBA BIOS functions, of which there&#39;s an entry called &amp;quot;BIOS Multi Boot (Single Game Pak)&amp;quot; which describes a process by which the GBA can boot a game over the link cable. That sounds like what we&#39;re looking for.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: I&#39;ve adjusted some terms in quotes from GBATEK to adhere to more modern terminology. The terms Leader/Follower will be used from here on.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SWI 25h (GBA) - MultiBoot&lt;br&gt;
This function uploads &amp;amp; starts program code to follower GBAs, allowing to launch programs on follower units even if no cartridge is inserted into the followers (this works because all GBA BIOSes contain built-in download procedures in ROM).&lt;br&gt;
However, the SWI 25h BIOS upload function covers only 45% of the required Transmission Protocol, the other 55% must be coded in the leader cartridge (see Transmission Protocol below).&lt;br&gt;
r0  Pointer to MultiBootParam structure&lt;br&gt;
r1  Transfer Mode (undocumented)&lt;br&gt;
0=256KHz, 32bit, Normal mode    (fast and stable)&lt;br&gt;
1=115KHz, 16bit, MultiPlay mode (default, slow, up to three followers)&lt;br&gt;
2=2MHz,   32bit, Normal mode    (fastest but maybe unstable)&lt;br&gt;
Note: HLL-programmers that are using the MultiBoot(param_ptr) macro cannot specify the transfer mode and will be forcefully using MultiPlay mode.&lt;br&gt;
Return:&lt;br&gt;
r0  0=okay, 1=failed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can likely start this by looking through Emerald&#39;s ROM for SWI 25h - the software interrupt opcode with immediate argument 0x25. Unfortunately, after searching through all 900+ software interrupt references in the Emerald ROM, I could not find any referencing SWI 0x25. Which is odd, isn&#39;t it? Seeing how that didn&#39;t quite work, I think I will use the following table from GBATEK to search for some communication primitives:&lt;/p&gt;
&lt;h4 id=&quot;required-transfer-initiation-in-leader-program&quot;&gt;Required Transfer Initiation in leader program&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Times&lt;/th&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Expl.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;6200&lt;/td&gt;
&lt;td&gt;FFFF&lt;/td&gt;
&lt;td&gt;Follower not in multiplay/normal mode yet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6200&lt;/td&gt;
&lt;td&gt;0000&lt;/td&gt;
&lt;td&gt;Follower entered correct mode now&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;6200&lt;/td&gt;
&lt;td&gt;720x&lt;/td&gt;
&lt;td&gt;Repeat 15 times, if failed: delay 1/16s and restart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;610y&lt;/td&gt;
&lt;td&gt;720x&lt;/td&gt;
&lt;td&gt;Recognition okay, exchange leader/follower info&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;60h&lt;/td&gt;
&lt;td&gt;xxxx&lt;/td&gt;
&lt;td&gt;NN0x&lt;/td&gt;
&lt;td&gt;Transfer C0h bytes header data in units of 16bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6200&lt;/td&gt;
&lt;td&gt;000x&lt;/td&gt;
&lt;td&gt;Transfer of header data completed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;620y&lt;/td&gt;
&lt;td&gt;720x&lt;/td&gt;
&lt;td&gt;Exchange leader/follower info again&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;63pp&lt;/td&gt;
&lt;td&gt;720x&lt;/td&gt;
&lt;td&gt;Wait until all followers reply 73cc instead 720x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;63pp&lt;/td&gt;
&lt;td&gt;73cc&lt;/td&gt;
&lt;td&gt;Send palette_data and receive client_data[1-3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;64hh&lt;/td&gt;
&lt;td&gt;73uu&lt;/td&gt;
&lt;td&gt;Send handshake_data for final transfer completion&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Aaaaaaaand nothing. What? Well, here&#39;s where we learn about the processor inside the GBA.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The two CPU states&lt;br&gt;
As mentioned above, two CPU states exist:&lt;br&gt;
ARM state: Uses the full 32bit instruction set (32bit opcodes)&lt;br&gt;
THUMB state: Uses a cutdown 16bit instruction set (16bit opcodes)&lt;br&gt;
Regardless of the opcode-width, both states are using 32bit registers, allowing 32bit memory addressing as well as 32bit arithmetic/logical operations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Combining ARM and THUMB state&lt;br&gt;
Switching between ARM and THUMB state is done by a normal branch (BX) instruction which takes only a handful of cycles to execute (allowing to change states as often as desired - with almost no overload).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;m under the impression that Ghidra is misinterpreting a number of instructions here as different modes, as the opcode width changes as well as the opcodes themselves:&lt;/p&gt;
&lt;!-- THUMB Binary Opcode Format --&gt;
&lt;pre&gt;&lt;code&gt;Form|_15|_14|_13|_12|_11|_10|_9_|_8_|_7_|_6_|_5_|_4_|_3_|_2_|_1_|_0_|
...
_17_|_1___1___0___1___1___1___1___1_|___________User_Data___________|SWI
...
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- ARM Binary Opcode Format --&gt;
&lt;pre&gt;&lt;code&gt;|..3 ..................2 ..................1 ..................0|
|1_0_9_8_7_6_5_4_3_2_1_0_9_8_7_6_5_4_3_2_1_0_9_8_7_6_5_4_3_2_1_0|
...
|_Cond__|1_1_1_1|_____________Ignored_by_Processor______________| SWI
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately I couldn&#39;t actually find any way to handle this properly in Ghidra, so I had to switch to IDA from here on out.&lt;/p&gt;
&lt;p&gt;Looking for the above &amp;quot;SWI 0x25&amp;quot;, it seems IDA recognizes SWI as &amp;quot;SVC&amp;quot;, which is close enough, I guess? We have 2 references to it in the Emerald ROM, with only one of those in executable code:&lt;/p&gt;
&lt;!-- SVC 0x25 Call --&gt;
&lt;pre&gt;&lt;code&gt;ROM:082E7094 sub_82E7094:                            @ CODE XREF: sub_81BA70C+2F2↑p
ROM:082E7094                 MOVS    R1, #1
ROM:082E7096                 SVC     0x25 @ &#39;%&#39;
ROM:082E7098                 BX      LR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oooh! Remember the SWI docs? It&#39;s clearly putting &lt;code&gt;1&lt;/code&gt; into R1 to set the transfer mode before invoking the multiboot BIOS function. I named this &amp;quot;invokeMultiboot&amp;quot; and checked the calling function to see if there was anything interesting in there - and I see multiboot protocol primitives and SIO addresses! The entire function seems to be responsible for handling the multiboot negotiation. Checking the calling function of that, we get an interesting construct:&lt;/p&gt;
&lt;!-- Multiboot handling switch statement --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_BYTE &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;sub_81BF5A4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LABEL_27&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sub_81BF7A4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;word_30022EE &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LABEL_27&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sub_81BF7A4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;word_30022EE &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LABEL_27&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sub_81BF7A4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_DWORD &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dword_89A6550&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_BYTE &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v2 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;sub_81BA6D0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_WORD &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LABEL_27&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;multibootCommsHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_BYTE &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_DWORD &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x20200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x20200&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_WORD &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      v4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_WORD &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_WORD &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; v4 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xB4u&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;sub_81BAB6C&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v3 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;dword_89A660C&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_89AA144 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;dword_89A660C&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LABEL_27&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sub_81BF7A4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;multibootCommsHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sub_81BAC30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_BYTE &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dword_30012B8 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
LABEL_27&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sub_81BF7A4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;word_30022EE &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;sub_80008F4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sub_81BF7A4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;word_30022EE &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;dword_30012B8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LABEL_27&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Following the statements at &lt;code&gt;LABEL_27&lt;/code&gt;, this code looks like it&#39;s stepping through the cases as steps in order. It has a region of memory whose address is in IRAM. I have no clue why it runs the multiboot function twice at this point. Rather than trying to follow the execution of this function, we know that the ROM header sent to the secondary system is placed at 0x20 in the multiboot parameter, so let&#39;s follow the parameter passed to SWI 0x25 up through its callers and see where that gets set.&lt;/p&gt;
&lt;p&gt;After many hours of fussing around with the &lt;code&gt;multibootProcessor&lt;/code&gt; and &lt;code&gt;multibootCommunicationHandler&lt;/code&gt; as I call it, I could not find anywhere where the &lt;code&gt;boot_srcp&lt;/code&gt; or &lt;code&gt;boot_endp&lt;/code&gt; are set, which seems to tell SWI 0x25 where to copy the actual program to boot from. I also could not find any location where the header data described on GBATEK is copied. I was &lt;em&gt;about&lt;/em&gt; to give up with this strategy since I spent so much time on it. But I realized that, since I figured out that &lt;code&gt;dword_30012B8 + 4&lt;/code&gt; is the &lt;code&gt;multibootParam&lt;/code&gt; structure described on GBATEK, I could go to the &lt;code&gt;multibootProcessor&lt;/code&gt;and check every function that receives that parameter for references to &lt;code&gt;+0x20&lt;/code&gt; or &lt;code&gt;+0x24&lt;/code&gt; (the &lt;code&gt;boot_srcp&lt;/code&gt; and &lt;code&gt;boot_endp&lt;/code&gt;, respectively). And wouldn&#39;t you know it, a function I completely originally ignored was the function setting these fields:&lt;/p&gt;
&lt;!-- multibootSetCopyRegion --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; __fastcall &lt;span class=&quot;token function&quot;&gt;multibootSetCopyRegion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;multibootParam &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;multibootParam&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; romSrc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; romLenMin15&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; a4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; v7&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; romLen&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// r2&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; v9&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// r3&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; v10&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// r0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; v12&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [sp+10h] [bp-4h]&lt;/span&gt;

  v7 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; multibootParam&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;multiboot_state
    &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;multibootParam&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;client_bit
    &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; multibootParam&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;unknown3&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;multibootParam&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;boot_srcp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; romSrc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; romLen &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;romLenMin15 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xFFFFFFF0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; romLen &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x3FF00&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;resetMultibootParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;multibootParam&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    multibootParam&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;boot_endp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; romSrc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; romLen&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a5 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x4000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        v9 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; a4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v10 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a5&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LABEL_10&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        v10 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v9 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LABEL_10&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        v9 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; a4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v10 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a5 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
LABEL_10&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        v7 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v9 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; v10&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    multibootParam&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;palette_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v7 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x81&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    multibootParam&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;multiboot_state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xD0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v12&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can get the ROM ptr from the parameters. What are they?&lt;/p&gt;
&lt;!-- multibootSetCopyRegion call --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token function&quot;&gt;multibootSetCopyRegion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v3 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;                                       &lt;span class=&quot;token comment&quot;&gt;// multibootParam&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;dword_89A660C&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;                              &lt;span class=&quot;token comment&quot;&gt;// boot_srcp&lt;/span&gt;
        dword_89AA144 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;dword_89A660C&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;token comment&quot;&gt;// romLenMin15&lt;/span&gt;
        &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome! What&#39;s at &lt;code&gt;&amp;amp;dword_89A660C[1]&lt;/code&gt;? That&#39;s 4 bytes after &lt;code&gt;0x89A660C&lt;/code&gt;, so:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/GF27F1l3oO-903.avif 903w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/GF27F1l3oO-903.webp 903w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/GF27F1l3oO-903.png&quot; alt=&quot;A section of memory in the Emerald ROM dump, showing what looks to be a sub-ROM.&quot; width=&quot;903&quot; height=&quot;1323&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;That sure looks like a ROM! It looks like it starts &lt;em&gt;after&lt;/em&gt; what looks to be a ROM header, but remember, the ROM header is transferred before &lt;code&gt;SWI 0x25&lt;/code&gt; is invoked. If we head back to IDA and go backwards a bit, we can actually see a reference to... oh.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/G1X2c7GJpC-930.avif 930w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/G1X2c7GJpC-930.webp 930w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/G1X2c7GJpC-930.png&quot; alt=&quot;A section of memory in IDA showing a reference to 89A660C as described above, but another reference to what looks like a ROM header, C0 bytes before it with xrefs from the multibootProcessor function.&quot; width=&quot;930&quot; height=&quot;461&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s bring this ROM into a new file and throw it into IDA or Ghidra and see what we can find!&lt;/p&gt;
&lt;h1 id=&quot;preparing-to-analyze-the-sub-rom&quot;&gt;Preparing to Analyze the Sub-ROM&lt;/h1&gt;
&lt;p&gt;When we open the patch program in IDA, we get something unexpected (or... expected?). It only recognizes a few functions, and they aren&#39;t correct either.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/8VmscCP7Mh-475.avif 475w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/8VmscCP7Mh-475.webp 475w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/8VmscCP7Mh-475.png&quot; alt=&quot;4 functions in IDA, start, sub_8000100, sub_8000120, and sub_800014C with a size of 0x30094&quot; width=&quot;475&quot; height=&quot;129&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;As you might have guessed, since we&#39;re not running from a Game Pak, our entrypoint and ROM base address isn&#39;t 0x8000000 anymore. Our multiboot image has been copied to external work RAM on the GBA board (outside of the CPU). Not only is this why our ROM isn&#39;t analyzed properly, it&#39;s also the reason there&#39;s a 256kb limit on the size of the multiboot image - there&#39;s only 256kb of this RAM available. This is the reason for the size check on &lt;code&gt;romLen&lt;/code&gt; in the &lt;code&gt;multibootSetCopyRegion&lt;/code&gt; function we saw earlier. Let&#39;s see if we can modify the GBA loader for IDA to analyze this ROM properly.&lt;/p&gt;
&lt;p&gt;Even after setting the entrypoint appropriately to the beginning of external work RAM, we still get this odd analysis. To make matters even worse, we&#39;re in the dark with decompilation - the code we&#39;re booting appears to be THUMB, which IDA can&#39;t decompile. In the few instructions I do see though, there&#39;s a construct that might give us a path forward.&lt;/p&gt;
&lt;!-- Berry Patch assembly --&gt;
&lt;pre class=&quot;language-asm&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-asm&quot;&gt;WRAM:20001A0 loc_20001A0:                            @ CODE XREF: sub_200014C:loc_20001A0↓j
WRAM:20001A0                                         @ sub_200014C+5C↓j ...
WRAM:20001A0                 Bne             loc_20001A0
WRAM:20001A4                 CMP             R1, R2
WRAM:20001A8                 Bne             loc_20001A0
WRAM:20001AC                 LDRH            R2, [R3,#2]
WRAM:20001B0                 STRH            R2, [R0,#0xA]
WRAM:20001B4                 BL              sub_2000120
WRAM:20001B8                 Bne             loc_20001A0
WRAM:20001BC                 CMP             R1, R2
WRAM:20001C0                 Bne             loc_20001A0
WRAM:20001C4                 MOV             R1, #0
WRAM:20001C8                 STRH            R1, [R0,#0xA]
WRAM:20001CC                 LDR             R0, =unk_20002F0
WRAM:20001D0                 LDR             R1, =loc_2010000
WRAM:20001D4                 SVC             0x110000
WRAM:20001D8                 LDR             LR, =loc_2010000
WRAM:20001DC                 BX              LR @ loc_2010000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember SVC? This is THUMB code, so the weird-looking immediate for the SVC is actually just 0x11. What is &lt;code&gt;SWI 0x11&lt;/code&gt;? It&#39;s &lt;code&gt;LZ77UnCompReadNormalWrite8bit&lt;/code&gt;, reading data from &lt;code&gt;0x20002F0&lt;/code&gt;, decompressing it, writing it to &lt;code&gt;0x2010000&lt;/code&gt;, and then branching right there. After finding a &lt;a href=&quot;https://github.com/lunasorcery/gba-lz77&quot;&gt;wonderful tool&lt;/a&gt;, we can copy everything from &lt;code&gt;0x20002F0&lt;/code&gt; to the end of the &amp;quot;ROM&amp;quot; into a new file, decompress it, then place this data back into said &amp;quot;ROM&amp;quot; at &lt;code&gt;0x2010000&lt;/code&gt; and re-analyze it!&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/VOvtygzpyG-1419.avif 1419w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/VOvtygzpyG-1419.webp 1419w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/VOvtygzpyG-1419.png&quot; alt=&quot;IDA view of the Berry Patch ROM, showing not just 3 functions but many more.&quot; width=&quot;1419&quot; height=&quot;974&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;There we go! We can now take a look and analyze the code of the Berry Patch itself. Since IDA won&#39;t provide decompilation for this, we&#39;ll go back to Ghidra after adjusting the Ghidra GBA Loader plugin to set the entrypoint to &lt;code&gt;0x2000000&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;actually-analyzing-the-sub-rom&quot;&gt;Actually Analyzing the Sub-ROM&lt;/h1&gt;
&lt;p&gt;There&#39;s a few things we know already about the Berry Patch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it reads your save data&lt;/li&gt;
&lt;li&gt;it reads the RTC&lt;/li&gt;
&lt;li&gt;it writes to the RTC (sometimes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s start with GPIO access, as I&#39;ve poked around that enough to establish a basic sense of it. The most likely place to find useful code is in functions that utilize the direction and control registers for GPIO. There&#39;s only two places the GPIO control register is used, and 12 places the direction register is used.&lt;/p&gt;
&lt;!-- setGPIOReadWrite --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined4 &lt;span class=&quot;token function&quot;&gt;setGPIOReadWrite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  GPIO_CNT &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;ll call this &lt;code&gt;setGPIOReadWrite&lt;/code&gt; because it sets the control register to 1, which means &amp;quot;R/W mode&amp;quot;. And yes, there is a &lt;code&gt;setGPIOReadOnly&lt;/code&gt; function as well - equally as unexciting. On the other hand, if we look at references to the GPIO direction register, we get a handful of functions full of what looks like RTC primitives. Check this out:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/4dzE1KRkXx-1819.avif 1819w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/4dzE1KRkXx-1819.webp 1819w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/4dzE1KRkXx-1819.png&quot; alt=&quot;Three windows, one the Ghidra window showing a function manually named RTCReset, where in the function it sends 0x60 over GPIO. On the bottom is 010 Editor showing that, when parsed as an RTC command, 0x60 is command 0 and is a write command. Finally, on the left is a table of the RTC datasheet showing that command 0 is the reset command.&quot; width=&quot;1819&quot; height=&quot;945&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please forgive my having named variables prior to explaining them. If I wrote about every dead-end before finding the correct path, it would be very boring.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In fact, we can take a look at every function that calls &lt;code&gt;sendGPIO&lt;/code&gt; and rename the upper function with commands appropriately. Doing this, we now have 8 documented functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RTCReadAlarm1&lt;/code&gt;: read alarm 1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RTCReadHMS&lt;/code&gt;: read hour, minute, second from RTC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RTCReadStatus&lt;/code&gt;: read status register from RTC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RTCReadYMDDOW&lt;/code&gt;: read year, month, day, day of week from RTC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RTCReset&lt;/code&gt;: reset RTC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RTCWriteHMS&lt;/code&gt;: write hour, minute, second to RTC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RTCWriteStatus&lt;/code&gt;: write status register to RTC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RTCWriteYMDDOW&lt;/code&gt;: write year, month, day, day of week to RTC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given we know that the Berry Patch writes the year to the RTC, let&#39;s follow that function up... and here we go:&lt;/p&gt;
&lt;!-- FUN_02010b2c --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined4 &lt;span class=&quot;token function&quot;&gt;FUN_02010b2c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; iVar1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;FUN_0201074c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  iVar1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FUN_02010558&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iVar1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iVar1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FUN_02010558&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; iVar1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    iVar1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FUN_02010558&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iVar1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      DAT_03001020 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;token comment&quot;&gt;// 2002&lt;/span&gt;
      DAT_03001021 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;token comment&quot;&gt;// jan&lt;/span&gt;
      DAT_03001022 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;_RTCWriteYMDDOW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      iVar1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FUN_02010ae8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iVar1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;FUN_02010a84&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;FUN_02010a44&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;FUN_02010a44&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;_RTCWriteYMDDOW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_03001020&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what we&#39;ve been looking for this ENTIRE TIME! The code that determines whether to set the date to Jan 2, 2002, or to increase it by 366 days! Let&#39;s clean it up and name some surrounding functions!&lt;/p&gt;
&lt;!-- BerryUpdateRTCWrite --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined4 &lt;span class=&quot;token function&quot;&gt;BerryUpdateRTCWrite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; val&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;RTCReadStatusAndYMDDOW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BCDDecode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;val &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BCDDecode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// if year is 0 or 1 (2000 or 2001)&lt;/span&gt;
    val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BCDDecode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;val &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// if year == 1 (2001)&lt;/span&gt;
      g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;month &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;day &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;_RTCWriteYMDDOW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;HasLeapDay2000Occurred&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;val &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// if the leap day in 2000 has already occurred */&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;rtcIncrementDay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;rtcIncrement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;rtcIncrement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;_RTCWriteYMDDOW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This shows exactly what the logic is for actually setting the RTC as part of the Berry Patch. If the year is 1, it just sets the RTC to Jan 2, 2002. If the year is 0, it checks if the leap day has happened in 2000 yet. If it has, it sets the RTC 366 days into the future by incrementing the day and anything else necessary (such as the month or year if the day would surpass the number of days in that month). If the leap day has not happened yet, it just increments the year.&lt;/p&gt;
&lt;p&gt;This is all well and good - awesome, actually, including the fact that the calling function seems to be another one of those &amp;quot;handler&amp;quot; type functions with multiple switch cases that progress through to each other. We&#39;ll call that function &lt;code&gt;BerryUpdateMain&lt;/code&gt; from now on, as we&#39;ll see more of it soon. But it doesn&#39;t explain the behavior that we observed in the table far above. We&#39;ll have to look more into this, as there&#39;s still a few mysteries. I think the next thing to check is where the berry update program accesses the save on the Ruby or Sapphire cartridge.&lt;/p&gt;
&lt;h2 id=&quot;save-file-aside&quot;&gt;Save File Aside&lt;/h2&gt;
&lt;p&gt;As a preface to the next few sections, we&#39;ll be looking at the save file in more depth. This information is &lt;a href=&quot;https://bulbapedia.bulbagarden.net/wiki/Save_data_structure_(Generation_III)&quot;&gt;from Bulbapedia&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;entire-sram-region&quot;&gt;Entire SRAM Region&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Start Address&lt;/th&gt;
&lt;th&gt;End Address&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x0&lt;/td&gt;
&lt;td&gt;0xDFFF&lt;/td&gt;
&lt;td&gt;0xE000&lt;/td&gt;
&lt;td&gt;Save Slot A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xE000&lt;/td&gt;
&lt;td&gt;0x1C000&lt;/td&gt;
&lt;td&gt;0xE000&lt;/td&gt;
&lt;td&gt;Save Slot B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1C000&lt;/td&gt;
&lt;td&gt;0x1E000&lt;/td&gt;
&lt;td&gt;0x2000&lt;/td&gt;
&lt;td&gt;Hall of Fame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1E000&lt;/td&gt;
&lt;td&gt;0x1F000&lt;/td&gt;
&lt;td&gt;0x2000&lt;/td&gt;
&lt;td&gt;Mystery Gift/e-Reader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1F000&lt;/td&gt;
&lt;td&gt;0x200000&lt;/td&gt;
&lt;td&gt;0x2000&lt;/td&gt;
&lt;td&gt;Recorded Battles&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;single-save-slot&quot;&gt;Single Save Slot&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Start Address&lt;/th&gt;
&lt;th&gt;End Address&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x0&lt;/td&gt;
&lt;td&gt;0x0FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;0x1FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x2000&lt;/td&gt;
&lt;td&gt;0x2FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3000&lt;/td&gt;
&lt;td&gt;0x3FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x4000&lt;/td&gt;
&lt;td&gt;0x4FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x5000&lt;/td&gt;
&lt;td&gt;0x5FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x6000&lt;/td&gt;
&lt;td&gt;0x6FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x7000&lt;/td&gt;
&lt;td&gt;0x7FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x8000&lt;/td&gt;
&lt;td&gt;0x8FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x9000&lt;/td&gt;
&lt;td&gt;0x9FFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xA000&lt;/td&gt;
&lt;td&gt;0xAFFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xB000&lt;/td&gt;
&lt;td&gt;0xBFFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xC000&lt;/td&gt;
&lt;td&gt;0xCFFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xD000&lt;/td&gt;
&lt;td&gt;0xDFFF&lt;/td&gt;
&lt;td&gt;0x1000&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;section-ids&quot;&gt;Section IDs&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Used Size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Trainer Info&lt;/td&gt;
&lt;td&gt;0x890&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Team/Items&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Game State&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Misc Data&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Rival Info&lt;/td&gt;
&lt;td&gt;0xC40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;PC Buffer A&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;PC Buffer B&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;PC Buffer C&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;PC Buffer D&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;PC Buffer E&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;PC Buffer F&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;PC Buffer G&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;PC Buffer H&lt;/td&gt;
&lt;td&gt;0xF80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;PC Buffer I&lt;/td&gt;
&lt;td&gt;0x7D0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;The sections in a save block do not always start at 0!&lt;/strong&gt; The game &lt;em&gt;rotates&lt;/em&gt; the save file sections every save.&lt;/p&gt;
&lt;h4 id=&quot;single-save-section&quot;&gt;Single Save Section&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Start Address&lt;/th&gt;
&lt;th&gt;End Address&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x0&lt;/td&gt;
&lt;td&gt;Varies&lt;/td&gt;
&lt;td&gt;Varies&lt;/td&gt;
&lt;td&gt;Data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x0FF4&lt;/td&gt;
&lt;td&gt;0x0FF6&lt;/td&gt;
&lt;td&gt;0x2&lt;/td&gt;
&lt;td&gt;Section ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x0FF6&lt;/td&gt;
&lt;td&gt;0x0FF8&lt;/td&gt;
&lt;td&gt;0x2&lt;/td&gt;
&lt;td&gt;Checksum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x0FF8&lt;/td&gt;
&lt;td&gt;0x0FFC&lt;/td&gt;
&lt;td&gt;0x4&lt;/td&gt;
&lt;td&gt;Signature&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x0FFC&lt;/td&gt;
&lt;td&gt;0x0FFF&lt;/td&gt;
&lt;td&gt;0x4&lt;/td&gt;
&lt;td&gt;Save Index&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I&#39;ve set these structures up in Ghidra, ready to be used when we encounter any references to this data. There&#39;s only a few important things to remember here. Each section may contain a different amount of data, as some sections don&#39;t use all 4084 bytes available to them. The signature at the end of each section is always &lt;code&gt;0x8012025&lt;/code&gt;. Finally, the save index is incremented on every save and is used to determine which save to read and write from when playing the game. The game will always load the valid save with the highest save index.&lt;/p&gt;
&lt;h2 id=&quot;god-save-the-rtc-data&quot;&gt;God Save The... RTC Data?&lt;/h2&gt;
&lt;p&gt;It&#39;s not particularly well documented (I just &lt;a href=&quot;https://github.com/kwsch/PKHeX/blob/master/PKHeX.Core/Saves/Substructures/Gen3/RTC3.cs#L6&quot;&gt;read the code&lt;/a&gt;), but PKHeX is open source and has all of the save data structures laid out for reading. Apparently, there are two RTC data structures that store the &amp;quot;initial&amp;quot; time, and the &amp;quot;elapsed&amp;quot; time. I would guess the initial time is used to determine how much time has passed, if any, and the elapsed time is used to display your playtime on the save screen. For some reason, my saves did not have either of these things. Maybe I closed mGBA before it flushed properly? Anyways, we now know that there are two possible locations for the berry update program to read from within SRAM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SRAM + 0x98: Slot A Initial Time&lt;/li&gt;
&lt;li&gt;SRAM + 0xA0: Slot A Elapsed Time&lt;/li&gt;
&lt;li&gt;SRAM + 0xE098: Slot B Initial Time&lt;/li&gt;
&lt;li&gt;SRAM + 0xE0A0: Slot B Elapsed Time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, this was pretty much a dead end. There are no direct references to pretty much anywhere in SRAM accessing anything that looks like a related save file value. This either means that it doesn&#39;t happen and the save file access is for another reason, or it&#39;s abstracted in some way.&lt;/p&gt;
&lt;h2 id=&quot;flash-0xaaaaaaaa&quot;&gt;FLASH! 0xAAAAAAAA!&lt;/h2&gt;
&lt;p&gt;While looking through docs related to SRAM on GBATEK, I found some information regarding some memory locations in SRAM I was seeing writes to, but didn&#39;t know anything about:&lt;/p&gt;
&lt;!-- WriteSomethingSRAM2 --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined8 &lt;span class=&quot;token function&quot;&gt;WriteSomethingSRAM2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;short&lt;/span&gt; sVar1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; iVar2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 uint uVar3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined1 auStack_50 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;short&lt;/span&gt; local_10&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 &lt;span class=&quot;token function&quot;&gt;FUN_02011af8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auStack_50&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 DAT_0e002aaa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x55&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 DAT_0e005555 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x90&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;local_10 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; local_10 &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; local_10 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; local_10 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 iVar2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FUN_02012ad4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_0e000001&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 uVar3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FUN_02012ad4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xe000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 DAT_0e002aaa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x55&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 DAT_0e005555 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sVar1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; sVar1 &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; sVar1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sVar1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iVar2 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; uVar3 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;GBA Cart Backup Flash ROM&lt;br&gt;
Chip Identification (all device types)&lt;br&gt;
[E005555h]=AAh, [E002AAAh]=55h, [E005555h]=90h  (enter ID mode)&lt;br&gt;
dev=[E000001h], man=[E000000h]                  (get device &amp;amp; manufacturer)&lt;br&gt;
[E005555h]=AAh, [E002AAAh]=55h, [E005555h]=F0h  (terminate ID mode)&lt;br&gt;
Used to detect the type (and presence) of FLASH chips. See Device Types below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This function returns the device ID. The battery in the Gen 3 Pokémon games is not there to power the RAM for the save file, it&#39;s for the RTC. Therefore, it must have non-volatile flash memory for the save file. Since the save files saved by emulators are 128 kilobytes, the size of the flash chip on these carts must be a 128K model. Alternatively, we could determine this by the fact that Gen 3 games have 2 blocks of 14 save file sections of 4K each, resulting in 112K, requiring a 128K chip. There&#39;s a number of reasons you&#39;d want to determine the flash chip device and manufacturer; the most common reason would be timing, as different manufacturers have different timing guarantees on their chip&#39;s access.&lt;/p&gt;
&lt;p&gt;The implications of this didn&#39;t click for a while, but as I was looking through the functions and the IDs, I realized that Nintendo only shipped two different 128K flash chips, both of which have IDs near the caller of the above function:&lt;/p&gt;
&lt;!-- FlashROMSetFunctions --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined8 &lt;span class=&quot;token function&quot;&gt;FlashROMSetFunctions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;short&lt;/span&gt; flashDeviceID&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 WAITCNT &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; WAITCNT &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xfffc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 flashDeviceID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashROMGetDevice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 readAddr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;FlashROM_FunctionTableStart&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;token comment&quot;&gt;/* if we&#39;ve exhausted our options, just set them anyways */&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
LAB_02011e26&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
     FLASHROM_FUNC_1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined4 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     FLASHROM_FUNC_2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined4 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     FLASHROM_FUNC_3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined4 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     FLASHROM_FUNC_4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined4 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     FLASHROM_FUNC_5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined4 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     FLASHROM_DAT_1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined4 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     FLASHROM_DAT_2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;token comment&quot;&gt;/* if flash type matches ID at +0x2c, use these functions */&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flashDeviceID &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LAB_02011e26&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   readAddr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readAddr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; true &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Comments and names were, of course, added after an hour of staring at this function.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, this function gets the flash chip device ID. It then iterates over an area of memory that contains pointers to functions and data, checking if the ID is equal to the memory at &lt;code&gt;+0x2c&lt;/code&gt;, which is a flash chip ID. If it matches, it sets its return value to 0 for success, and sets function pointers in RAM to specific functions used to handle that specific chip. Thanks to this, we&#39;ve filled in an entire section in &lt;code&gt;BerryUpdateMain&lt;/code&gt;: after it gets the time, and before it applies the patch. We still have no evidence of save file access, though.&lt;/p&gt;
&lt;h2 id=&quot;the-save-file&quot;&gt;The Save File&lt;/h2&gt;
&lt;p&gt;Now that we know a number of &lt;code&gt;BerryUpdateMain&lt;/code&gt; functions and their order, we can continue down the list. After setting up the flash chip reading functions and data, we can continue to the next unknown function. Clicking through into function after function, we finally get to something that compares &lt;code&gt;DAT_03001234+0xFF8&lt;/code&gt; with &lt;code&gt;0x8012025&lt;/code&gt;... Is this accessing the save file?&lt;/p&gt;
&lt;p&gt;YES! YES IT IS! Here&#39;s an excerpt:&lt;/p&gt;
&lt;!-- Save file access code --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token comment&quot;&gt;// do save slot A&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;CopyGameSaveSection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;sectionIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;signature &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x8012025&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     hasSave &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; true&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     sectionChecksum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ValidateSectionChecksum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; relocationSpecs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;sectionId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sectionDataSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;checksum &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; sectionChecksum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       saveIndexA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;saveIndex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       validSaveSectionFlags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; validSaveSectionFlags &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;sectionId &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   sectionIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sectionIndex &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sectionIndex &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hasSave&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   sectionsValidA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;validSaveSectionFlags &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x3fff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     sectionsValidA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   sectionsValidA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s remarkable how readable decompiled code can be once you&#39;ve set up structures and names! It&#39;s obvious that the responsibility of this function is to determine 1. that the save file is valid and 2. which save file to end up using (this part was omitted from the excerpt as it is a quite long function). I&#39;ve named the location that stores the highest save index &lt;code&gt;SAVE_INDEX&lt;/code&gt;, and named a number of additional functions appropriately (&lt;code&gt;ValidateSaveAndFindHighestSaveIndex&lt;/code&gt;, &lt;code&gt;CopyGameSaveSection&lt;/code&gt;, &lt;code&gt;CopyBytesFromSaveSectionToDest&lt;/code&gt;, &lt;code&gt;ValidateSectionChecksum&lt;/code&gt;), despite having no idea what this construct is:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/bIdAPlPHEF-1932.avif 1932w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/bIdAPlPHEF-1932.webp 1932w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/bIdAPlPHEF-1932.png&quot; alt=&quot;A function on the right in Ghidra is seemingly set up to copy data from &amp;quot;saveFileSection&amp;quot; to &amp;quot;dest&amp;quot;. At the end is a function call to FUN_02012acc. The listing on the left side shows that address, but it contains an array of 2-byte values.&quot; width=&quot;1932&quot; height=&quot;1133&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;In the function that calls &lt;code&gt;ValidateSaveAndFindHighestSaveIndex&lt;/code&gt;, there&#39;s a call after it that receives the same parameter that points to section lengths that you might have seen in the excerpt above. That&#39;s how this structure was determined - it&#39;s an area of data in memory that stores memory addresses and section lengths.&lt;/p&gt;
&lt;!-- CopySaveSections --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined8 &lt;span class=&quot;token function&quot;&gt;CopySaveSections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined4 param_1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;SaveSectionRelocationSpecs &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;specs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 word checksum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 uint saveSlot&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 uint i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 SaveSectionRelocationSpecs &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;_specs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 ushort slotIndex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 &lt;span class=&quot;token comment&quot;&gt;// Since save slot alternates and saveIndex increments,&lt;/span&gt;
 &lt;span class=&quot;token comment&quot;&gt;// save A has even saveIndex numbers,&lt;/span&gt;
 &lt;span class=&quot;token comment&quot;&gt;// save B has odd saveIndex numbers&lt;/span&gt;
 saveSlot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SAVE_INDEX &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 slotIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;CopyGameSaveSection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;slotIndex &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;saveSlot &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xe0000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;sectionId &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     DAT_03001220 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; slotIndex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   _specs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; specs &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;sectionId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   checksum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ValidateSectionChecksum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;_specs&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;sectionDataSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   slotIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; slotIndex &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;signature &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x8012025&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;checksum &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; checksum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;_specs&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;sectionDataSize &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       _specs&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;relocationAddr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SAV_COPY_BASE&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ushort&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;_specs&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;sectionDataSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;slotIndex &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This copies &lt;code&gt;specs-&amp;gt;sectionDataSize&lt;/code&gt; bytes from &lt;code&gt;saveSection&lt;/code&gt; to &lt;code&gt;specs-&amp;gt;relocationAddr&lt;/code&gt;! This makes a ton of sense as to why there are no reads or writes to the SRAM region - it copies the entire sections it needs into memory rather than bothering to read it directly from SRAM. Now that we know what all of these memory regions are and do, we can move on to the next function from &lt;code&gt;BerryUpdateMain&lt;/code&gt; that we need to figure out.&lt;/p&gt;
&lt;h2 id=&quot;time-difference&quot;&gt;Time Difference&lt;/h2&gt;
&lt;p&gt;The next function is a function called directly by &lt;code&gt;BerryUpdateMain&lt;/code&gt;:&lt;/p&gt;
&lt;!-- FUN_020109a8 --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined8 &lt;span class=&quot;token function&quot;&gt;FUN_020109a8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p_Year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 byte year&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 &lt;span class=&quot;token function&quot;&gt;RTCReadStatusAndYMDDOW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BCDDecode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p_Year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; year&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;FUN_02010874&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_UnkTime1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_02028098&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;FUN_020108f8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_UnkTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;DAT_020280a0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_UnkTime1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; _g_UnkTime &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1440&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; DAT_03001212 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;DAT_03001213&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could have sworn I had seen some of these addresses before, so I explored a bit and found that these &lt;code&gt;DAT_02028098&lt;/code&gt; references &lt;em&gt;are addresses from the game save copy!&lt;/em&gt; What is it reading?&lt;/p&gt;
&lt;!-- Save file accesses --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token function&quot;&gt;FUN_02010874&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_UnkTime1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;SAVE_COPY_0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;FUN_020108f8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_UnkTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;SAVE_COPY_0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elapsed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_UnkTime1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s reading the initial and elapsed time in the save file! What for?&lt;/p&gt;
&lt;!-- CalculateTimeDifference --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined8 &lt;span class=&quot;token function&quot;&gt;CalculateTimeDifference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p_Year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 byte year&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 &lt;span class=&quot;token function&quot;&gt;RTCReadStatusAndYMDDOW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BCDDecode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p_Year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; year&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;CalcInitialTimeDifference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;g_YMDDOWStore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;CurrentInitialTimeDifference&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;SAVE_COPY_0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;CalcElapsedTimeDifference&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;ElapsedCurrentTimeDifference&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;SAVE_COPY_0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elapsed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;CurrentInitialTimeDifference&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; 
    ElapsedCurrentTimeDifference&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;day &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1440&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; 
    ElapsedCurrentTimeDifference&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hour &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; 
    ElapsedCurrentTimeDifference&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This calculates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CurrentInitialTimeDifference&lt;/strong&gt;: Difference in time between RTC time and Save Initial Time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ElapsedCurrentTimeDifference&lt;/strong&gt;: Difference in time between CurrentInitialTimeDifference and Save Elapsed Time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns&lt;/strong&gt;: 1 if the the total minutes in ElapsedCurrentTimeDifference is greater than or equal to 0, otherwise 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One interesting thing is that in order to obtain a day value, it uses the &lt;em&gt;broken&lt;/em&gt; RTCDateToDayValue function from Ruby and Sapphire to do so, likely for compatibility, as it&#39;s not supposed to correct the date, it&#39;s just supposed to determine a difference. In the end, it returns a value indicating if there is a time difference between the original game&#39;s calculated elapsed time and our elapsed time. Now we can fill in the case in &lt;code&gt;BerryUpdateMain&lt;/code&gt;:&lt;/p&gt;
&lt;!-- CalculateTimeDifference switch case --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// check if there is a difference in time between our calculated elapsed time and the game&#39;s calculated elapsed time&lt;/span&gt;
    hasMinuteDiff &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CalculateTimeDifference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hasMinuteDiff &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// if there is a time difference, bail if the year is not 0&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;year &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; SET_STATE_9&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// if there is no time difference, bail if the year is not 1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;year &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UNABLE_TO_UPDATE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// eventually shows &quot;unable to update berry program&quot;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
switchD_02010398_SET_INCREMENT_STATE&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;param_1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;param_1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;another-day-value-another-3-hours-of-my-life&quot;&gt;Another Day (Value), Another 3 Hours of My Life&lt;/h3&gt;
&lt;p&gt;I went to go use the decompilation and the knowledge we&#39;ve gained to explain why we&#39;ve seen the results we have, but realized there is one more thing to examine. There is a check in later steps in &lt;code&gt;BerryUpdateMain&lt;/code&gt; that can result in the patch failing even if it sets the RTC forward appropriately.&lt;/p&gt;
&lt;!-- Unknown 9 and 10 switch case --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; UNKNOWN_9&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
   result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FUN_2011864&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UNKNOWN_10&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; SET_STATE_SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; UNKNOWN_10&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;UpdateBG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;IDK&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FUN_0201189c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; switchD_02010398_set_UnableToUpdate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   g_PatchSuccess &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; g_PatchSuccess &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
SET_STATE_SUCCESS&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SUCCESS&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the result from &lt;code&gt;FUN_02011864&lt;/code&gt; is not 1, we continue to &lt;code&gt;UNKNOWN_10&lt;/code&gt; rather than entering the success state outright. The process in &lt;code&gt;FUN_0201189C&lt;/code&gt; can apparently fail, so even if the RTC was set forward, we get the message &amp;quot;Unable to update the Berry Program.&amp;quot;&lt;/p&gt;
&lt;!-- FUN_02011838 (GetDayValuePtrInSAVCOPY2, called by FUN_02011864 below) --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined8 &lt;span class=&quot;token function&quot;&gt;GetDayValuePtrInSAVCOPY2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 undefined &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offset &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x4000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offset &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// only incoming param_1 is 0x40c2, so this always returns 0x2029D54 - SAV_COPY_2[1348]&lt;/span&gt;
  result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;UNK_02021bd0 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It took an obnoxious amount of time for me to parse this since I had to use my actual brain instead of letting the decompiler do all the work for me. It turns out the only argument this function ever receives is &lt;code&gt;0x40C2&lt;/code&gt;, which, after the addition, puts the pointer it returns right in the middle of section 2 of the save file. I have no idea what this value is, but in my save file it is 0.&lt;/p&gt;
&lt;!-- FUN_02011864 (IsDayValueFromSAVCOPY2LessThanCurrentInitialTimeDifferenceDays) --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined8 &lt;span class=&quot;token function&quot;&gt;IsDayValueFromSAVCOPY2LessThanCurrentInitialTimeDifferenceDays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 ushort &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;dayValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 byte year &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 dayValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ushort &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetDayValuePtrInSAVCOPY2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x40c2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;CalculateTimeDifference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;dayValue &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;CurrentInitialTimeDifference&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;day&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve already cleaned this function up; you can see that we&#39;re getting a day value from the save file, checking the new time difference (note this is after fixing the RTC date), and verifying that the day value for something stored in the save computes as having happened in the past. If this is not the case, we proceed to &lt;code&gt;UNKNOWN_10&lt;/code&gt;, where we enter &lt;code&gt;FUN_0201189C&lt;/code&gt;&lt;/p&gt;
&lt;!-- FUN_0201189C (FixUnknownDayValue) --&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;undefined8 &lt;span class=&quot;token function&quot;&gt;FixUnknownDayValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; cVar1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; dayValueLessOrEqual&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined2 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p_UnknownDayValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 byte abStack_8 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 undefined4 uStack_4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 uStack_4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; in_lr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;token comment&quot;&gt;// Check this again for some reason&lt;/span&gt;
 dayValueLessOrEqual &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;IsDayValueFromSAVCOPY2LessThanCurrentInitialTimeDifferenceDays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dayValueLessOrEqual &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
LAB_020118d0&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
   result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Check it one more time, for some reason&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;CalculateTimeDifference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;abStack_8&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;CurrentInitialTimeDifference&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;day&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token comment&quot;&gt;// If the time difference is greater than -1, fix it&lt;/span&gt;
     p_UnknownDayValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;undefined2 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetDayValuePtrInSAVCOPY2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x40c2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p_UnknownDayValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     saveResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CopySaveData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0 means write the entire save to flash&lt;/span&gt;
     &lt;span class=&quot;token comment&quot;&gt;// If we fixed it, set result 1 and return&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;saveResult &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;goto&lt;/span&gt; LAB_020118d0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So there we have it. That&#39;s almost the entirety of &lt;code&gt;BerryUpdateMain&lt;/code&gt; figured out and labeled as to what it does. A full explanation of almost everything in the Berry Patch. Now, we can use everything we know to be able to determine why we were unable to update the berry program under certain circumstances earlier.&lt;/p&gt;
&lt;h2 id=&quot;inside-of-truck&quot;&gt;INSIDE OF TRUCK&lt;/h2&gt;
&lt;p&gt;Let&#39;s finally explain the behavior we were seeing earlier. Consider the following scenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Save Date&lt;/strong&gt;: 2000-12-15 (350)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Patch Date&lt;/strong&gt;: 2001-01-15 (15)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Save initial date&lt;/strong&gt;: 0-0-0-0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Save elapsed date&lt;/strong&gt;: 0-0-0-0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unknown day value&lt;/strong&gt;: 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: &amp;quot;There is no need to update your Berry Program.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The process for the patch is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Determine if patch is needed&lt;/strong&gt;: We are on Ruby 1.1, so we can&#39;t rule out that we don&#39;t need the patch yet&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Determine if the date/time is valid&lt;/strong&gt;: These checks are only for if the RTC has valid values, nothing to do with the game&#39;s state yet&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set up Flash ROM handling&lt;/strong&gt;: successful, even in emulator&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set up save copy&lt;/strong&gt;: successful, even in emulator&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Calculate time difference&lt;/strong&gt;: Year = 1, Difference = True. Observing the save file, our Initial and Elapsed Time are both 0 days, 0 hours, 0 minutes. Therefore the time difference between RTC and &lt;code&gt;initial&lt;/code&gt; is 15 days, and for simplicity 0 hours, minutes, and seconds. The time difference between that result and &lt;code&gt;elapsed&lt;/code&gt; is also 15 days, 0 hours, minutes, and seconds&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If year is not 0, set state to &lt;code&gt;DO_UNKNOWN_DAY_CHECK&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do Unknown Day Check&lt;/strong&gt;: DayValue = 0, DayValue &amp;lt;= 15 days = True, no fix needed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set state to &lt;code&gt;SUCCESS&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check g_PatchSuccess&lt;/strong&gt;: g_PatchSuccess is 0, set state to &lt;code&gt;NO_NEED_TO_UPDATE&lt;/code&gt;. If g_PatchSuccess was 1, we would show the success screen&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can finally explain why this happened - and it checks out! But you might be wondering (I was!) if I saved on December 15th, 2000, why is the date in my save 0-0-0? That is the crux of this, right? If it had the actual dates, it would make a lot more sense.&lt;/p&gt;
&lt;p&gt;Recall a number of sections ago, where I wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, when you set the clock upstairs at your house in R/S/E, the game simply uses that as a baseline for future timed events like Shoal Cave which rely on a specific time of day, it doesn&#39;t set the RTC&#39;s time to the provided value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The game has no idea how to offset your local time from the RTC if you never set it. Therefore, until you set the clock upstairs in your home, the initial and elapsed times in your save file will be 0 until you do so, no matter how long you play for. D&#39;oh. I was running all of my test cases above by saving immediately in the truck without setting the clock. What an interesting edge case!&lt;/p&gt;
&lt;p&gt;Anyways, let&#39;s go ahead and try this same exact scenario again, but this time we&#39;ll set the clock upstairs and ensure that our save file has some times set in it!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Save Date&lt;/strong&gt;: 2000-12-15 (350) (for real this time)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Patch Date&lt;/strong&gt;: 2001-01-15 (15)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Save initial time&lt;/strong&gt;: 349-14-00-37&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Save elapsed time&lt;/strong&gt;: 000-10-00-00&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unknown day value&lt;/strong&gt;: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/fsPPNcwXlP-480.avif 480w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/fsPPNcwXlP-480.webp 480w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/fsPPNcwXlP-480.png&quot; alt=&quot;A screen displaying the text &amp;quot;Unable to update the Berry Program.&amp;quot;&quot; width=&quot;480&quot; height=&quot;320&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;HUH?! Once more, let&#39;s walk through the steps. We can start on step 5 above since we know the previous steps aren&#39;t variable here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Calculate time difference&lt;/strong&gt;: Year = 1, Difference = False. The time difference between RTC and &lt;code&gt;initial&lt;/code&gt; is -334 days, 9 hours, 59 minutes, and 23 seconds. The time difference between that result and &lt;code&gt;elapsed&lt;/code&gt; is -336 days, 23 hours, 59 minutes, and 23 seconds. The total minutes is less than -1, so difference is false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If there is no time difference and year is not 1, go to &lt;code&gt;UNABLE_TO_UPDATE&lt;/code&gt;&lt;/strong&gt;: year is 1, so we continue to &lt;code&gt;UPDATE_RTC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update the RTC&lt;/strong&gt;: The RTC was set to January 1st, 2002 at 00:00:43 and g_PatchSuccess was set to 1. The next state is &lt;code&gt;DO_UNKNOWN_DAY_CHECK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do Unknown Day Check&lt;/strong&gt;: DayValue = 0, DayValue &amp;lt;= -336 days = FALSE, fix needed, set state to &lt;code&gt;FIX_UNKNOWN_DAY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unknown day fix:
&lt;ol&gt;
&lt;li&gt;Check if the fix is needed again. It still is&lt;/li&gt;
&lt;li&gt;Check if &lt;code&gt;-1 &amp;lt; -334&lt;/code&gt;, it&#39;s not, so skip the block&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;result&lt;/code&gt; to 0 and return&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If result is 0, go to &lt;code&gt;UNABLE_TO_UPDATE_2&lt;/code&gt; and show the &amp;quot;Unable to update Berry Program.&amp;quot; screen&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Jeeze, this unknown day thing is a pain! But let&#39;s think about this for a second - we&#39;re running in an emulator and the RTC was set. We can see in mGBA what the patch is trying to set the RTC to at this point, but if the patch is checking the RTC time, setting the RTC time to something different, then checking the RTC time again, the RTC hasn&#39;t actually been changed. As previously mentioned, it doesn&#39;t make much sense for mGBA and other emulators to handle RTC set commands, so it just doesn&#39;t. If we modify mGBA further with the following patch:&lt;/p&gt;
&lt;!-- mGBA RTC write diff --&gt;
&lt;pre class=&quot;language-diff&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;index 86ddc941f..1099f7ddb 100644
&lt;span class=&quot;token coord&quot;&gt;--- a/include/mgba/internal/gba/cart/gpio.h&lt;/span&gt;
&lt;span class=&quot;token coord&quot;&gt;+++ b/include/mgba/internal/gba/cart/gpio.h&lt;/span&gt;
@@ -71,6 +71,7 @@ struct GBARTC {
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	uint8_t time[7];
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	time_t lastLatch;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	time_t offset;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;	uint8_t wasSetManually;
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;};
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;DECL_BITFIELD(GPIOPin, uint16_t);
&lt;/span&gt;diff --git a/src/gba/cart/gpio.c b/src/gba/cart/gpio.c
index eb5328346..8f28a8ffe 100644
&lt;span class=&quot;token coord&quot;&gt;+++ b/src/gba/cart/gpio.c&lt;/span&gt;
@@ -103,6 +103,7 @@ void GBAHardwareInitRTC(struct GBACartridgeHardware* hw) {
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	hw-&gt;rtc.lastLatch = 0;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	hw-&gt;rtc.offset = 0;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;	hw-&gt;rtc.wasSetManually = 0;
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;}
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;
&lt;/span&gt;@@ -228,11 +247,15 @@ void _rtcProcessByte(struct GBACartridgeHardware* hw) {
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;			hw-&gt;rtc.control = hw-&gt;rtc.bits;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;			break;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;		case RTC_FORCE_IRQ:
&lt;/span&gt;			mLOG(GBA_HW, STUB, &quot;Unimplemented RTC command FORCE_IRQ&quot;);
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;			break;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;		case RTC_RESET:
&lt;/span&gt;			mLOG(GBA_HW, STUB, &quot;Unimplemented RTC command RESET&quot;);
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;		case RTC_DATETIME:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;		case RTC_TIME:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;			mLOG(GBA_HW, STUB, &quot;RTC command %02X input byte %02X&quot;, RTCCommandDataGetCommand(hw-&gt;rtc.command), hw-&gt;rtc.bits);
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;			hw-&gt;rtc.time[6 - hw-&gt;rtc.bytesRemaining] = hw-&gt;rtc.bits;
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;			hw-&gt;rtc.wasSetManually = 1;
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;			break;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;		}
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	}
&lt;/span&gt;@@ -271,6 +294,9 @@ unsigned _rtcOutput(struct GBACartridgeHardware* hw) {
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;}
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;void _rtcUpdateClock(struct GBACartridgeHardware* hw) {
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;	if (hw-&gt;rtc.wasSetManually) return;
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	time_t t;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	struct mRTCSource* rtc = hw-&gt;p-&gt;rtcSource;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;	if (rtc) {
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the mGBA RTC will be set appropriately when the Berry Patch sets the RTC to a specific time, but will not tick according to realtime. That would require more code changes than I&#39;m interested in doing at the moment. That being said, if we run the Berry Patch in the same way now, we get the following process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Calculate time difference&lt;/strong&gt;: Year = 1, Difference = False. The time difference between RTC and &lt;code&gt;initial&lt;/code&gt; is -334 days, 9 hours, 59 minutes, and 23 seconds. The time difference between that result and &lt;code&gt;elapsed&lt;/code&gt; is -336 days, 23 hours, 59 minutes, and 23 seconds. The total minutes is less than -1, so difference is false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If there is no time difference and year is not 1, go to &lt;code&gt;UNABLE_TO_UPDATE&lt;/code&gt;&lt;/strong&gt;: year is 1, so we continue to &lt;code&gt;UPDATE_RTC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update the RTC&lt;/strong&gt;: The RTC was set to January 1st, 2002 at 00:00:43 and g_PatchSuccess was set to 1. &lt;strong&gt;Because of the above updates to mGBA, the next time the RTC is accessed, it will report this time.&lt;/strong&gt; The next state is &lt;code&gt;DO_UNKNOWN_DAY_CHECK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do Unknown Day Check&lt;/strong&gt;: DayValue = 0, DayValue &amp;lt;= 733 days = TRUE, no fix needed, set state to &lt;code&gt;SUCCESS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;g_PatchSuccess&lt;/code&gt; is 1, so show success screen&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And there you have it. The fully explained Berry Patch process. Here is the table from far above, but updated with the actual values, having set the in-game clock appropriately and using the mGBA build that sets the RTC properly.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Save Date&lt;/th&gt;
&lt;th&gt;Save Initial Time&lt;/th&gt;
&lt;th&gt;Save Elapsed Time&lt;/th&gt;
&lt;th&gt;RTC Date of Patching&lt;/th&gt;
&lt;th&gt;Berry Patch Output&lt;/th&gt;
&lt;th&gt;RTC Date Set To&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-01 (1)&lt;/td&gt;
&lt;td&gt;1d,0hr,0m,23s&lt;/td&gt;
&lt;td&gt;0d,10hr,1m,0s&lt;/td&gt;
&lt;td&gt;2000-01-01 (1)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-01-01 (1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;152d,14hr,0m,55s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-06-02 (153)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;152d,14hr,0m,55s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2001-06-01 (152)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2002-01-02 (733)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;152d,14hr,0m,55s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2000-03-01 (61)&lt;/td&gt;
&lt;td&gt;&amp;quot;Unable to update the Berry Program&amp;quot;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;152d,14hr,0m,55s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2001-03-01 (60)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2002-01-02 (733)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-06-01 (153)&lt;/td&gt;
&lt;td&gt;152d,14hr,0m,55s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;&amp;quot;Unable to update the Berry Program&amp;quot;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;14d,14hr,0m,34s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-01-15 (15)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;14d,14hr,0m,34s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2001-01-10 (10)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2002-01-02 (733)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;14d,14hr,0m,34s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2001-01-15 (15)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program&amp;quot;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-01-15 (15)&lt;/td&gt;
&lt;td&gt;14d,14hr,0m,34s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2001-01-20 (20)&lt;/td&gt;
&lt;td&gt;&amp;quot;There is no need to update your Berry Program&amp;quot;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;349d,14hr,0m,33s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2001-12-16 (350)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;349d,14hr,0m,33s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2000-12-31 (366)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2002-01-01 (732)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;349d,14hr,0m,33s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2001-01-01 (1)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2002-01-02 (733)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000-12-15 (350)&lt;/td&gt;
&lt;td&gt;349d,14hr,0m,33s&lt;/td&gt;
&lt;td&gt;0d,10hr,0m,0s&lt;/td&gt;
&lt;td&gt;2001-01-15 (15)&lt;/td&gt;
&lt;td&gt;&amp;quot;Your Berry Program has been updated&amp;quot;&lt;/td&gt;
&lt;td&gt;2002-01-02 (733)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Honestly, I could have narrowed this down to like 6 cases now that we know how it works, but I figured I&#39;d just do the table over again entirely.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And that&#39;s all. I&#39;m satisfied with what I&#39;ve learned, what I&#39;ve found, and the behavior I was able to describe by exploring the disassembly of the patch program.&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was a super fun project and post to write. I got to explore a number of things I normally don&#39;t touch but I&#39;m still curious about. Despite not looking into it beforehand, I feel like I got a pretty complete picture of how the software works end-to-end. There are things I didn&#39;t look at, like GBA boilerplate for things like graphics display, or the game&#39;s text encoding and sprite display, but those are not interesting to me right now.&lt;/p&gt;
&lt;p&gt;If you&#39;re interested in what I looked into here, the pret project actually has full decompilation available for &lt;a href=&quot;https://github.com/pret/pokeemerald&quot;&gt;Pokémon Emerald&lt;/a&gt; &lt;strong&gt;and&lt;/strong&gt; the &lt;a href=&quot;https://github.com/pret/berry-fix&quot;&gt;Berry Update Program&lt;/a&gt;. I didn&#39;t look until I was finished here, but it is amazing how close I got to the &lt;a href=&quot;https://github.com/pret/berry-fix/blob/master/payload/src/main.c#L209&quot;&gt;officially unofficial &lt;code&gt;BerryUpdateMain&lt;/code&gt;&lt;/a&gt; with my labeled decompilation. Same with the &lt;a href=&quot;https://github.com/pret/pokeemerald/blob/master/src/berry_fix_program.c#L212&quot;&gt;berry fix code in Emerald&lt;/a&gt;. That unknown day value in the update program? It&#39;s the day you last received a TM from the guy in Pacifidlog town. Who knew! Even though my research is complete (and redundant :)), I&#39;ll probably be reading through some of this decompilation to see how it all clicks together just to satisfy my brain.&lt;/p&gt;
&lt;h2 id=&quot;exercise-for-the-reader&quot;&gt;Exercise for the Reader&lt;/h2&gt;
&lt;p&gt;It took me a long time to figure out how Emerald grabs the Berry Update multiboot image. I&#39;m going to be honest with you - I ended up searching the Emerald dump for ROM headers, finding the sub-ROM, and working backwards from there. I wanted to keep the post framed from the perspective of working at it with static analysis, but please, use all the tools available to you. I have a small Python script I used to replicate the day value code and the time difference code to understand it better. I have a 010 Editor template that parses the save and outputs the initial and elapsed times as well as the Pacifidlog town TM day value. Always use the right tool for the job!&lt;/p&gt;
&lt;p&gt;On that note, when I did search through Emerald for ROM headers, something interesting popped up.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/M7LfdNQiPl-268.avif 268w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/M7LfdNQiPl-268.webp 268w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/from-scratch-berry-patch/M7LfdNQiPl-268.png&quot; alt=&quot;Three occurrences of &amp;quot;24 FF AE 51&amp;quot; in the Emerald ROM dump.&quot; width=&quot;268&quot; height=&quot;135&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Why are there three? One is for Emerald, one is the Berry Patch, and one is &lt;code&gt;TEST01&lt;/code&gt;? I wonder what that is...&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Modernizing Software Deployment For Dummies</title>
    <link href="https://blog.perchbird.dev/posts/modernizing-deployment/" />
    <updated>2024-12-08T00:00:00Z</updated>
    <id>https://blog.perchbird.dev/posts/modernizing-deployment/</id>
    <content type="html">&lt;p&gt;I think one of the founding issues of programming education is that nobody shows you how to ship. There are countless examples, guides, tutorials online about how to use the latest framework to publish a to-do app to Vercel, but very few that show you how to take an application &lt;em&gt;you didn&#39;t think would get so complicated!&lt;/em&gt; and deploy it yourself, automatically, securely, and easily.&lt;/p&gt;
&lt;h1 id=&quot;introduction-to-reslogger&quot;&gt;Introduction to ResLogger&lt;/h1&gt;
&lt;p&gt;I write plugins for Final Fantasy XIV. The game itself has a virtual filesystem of sorts that utilize two file types: index files and dat files. You can think of an index file as a hashmap of file positions. The dat file is where the data actually is. The index file, being a hashmap, rarely stores actual file paths. If the game wants to know where &lt;code&gt;chara/monster/m0887/obj/body/b0001/model/m0887b0001.mdl&lt;/code&gt; is, the process goes as follows (assuming a retail game install - benchmarks work slightly differently):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Split the file path into folder and file parts. That is, &lt;code&gt;chara/monster/m0887/obj/body/b0001/model&lt;/code&gt; and &lt;code&gt;m0887b0001.mdl&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use some simple fallthrough conditionals to determine the &amp;quot;category ID&amp;quot; of the path. This one is in (hex) &lt;code&gt;040000&lt;/code&gt; because the path starts with &lt;code&gt;cha&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hash the folder part and the file part using JAMCRC.&lt;/li&gt;
&lt;li&gt;Look up the folder CRC in the index file data, then look up the file CRC. Since these are sorted by folder -&amp;gt; file, it&#39;s very fast.&lt;/li&gt;
&lt;li&gt;Obtain the data for this entry. 4 packed bytes contains the data file ID and the block offset.&lt;/li&gt;
&lt;li&gt;Use the data file ID to determine the data file (&lt;code&gt;040000.win32.dat0&lt;/code&gt;, &lt;code&gt;.dat1&lt;/code&gt;, etc) and the offset in the file (block offset * 8).&lt;/li&gt;
&lt;li&gt;Read the blocks from the data file in Square Enix&#39;s very special way.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you paid attention here, you may be thinking &amp;quot;so they don&#39;t store the paths?&amp;quot; No*. They do not. &lt;a href=&quot;https://www.google.com/search?q=ffxiv+explorer+%22hash%22&quot;&gt;That has been an industrial strength irritant for over a decade.&lt;/a&gt; That means the process of collecting paths is left to the reverse engineers. Unfortunately, not all paths are referenced directly, so you can&#39;t just parse them all out from other files like some kind of heathen. Some paths may never be referenced by another file, either hardcoded into the executable like title screen zones, computed at runtime like monster assets, or just not referenced at all like future assets for unreleased content. The unknown and unreleased stuff might be explored in a future post, but the things that the game actually does load can be tracked.&lt;/p&gt;
&lt;p&gt;The FFXIV datamining community has long had a Cheat Engine script for this purpose. That script would set a breakpoint at a single hardcoded address and handle the breakpoint using a cheat engine lua function that would write to the output window and to a file. It worked okay, but required Cheat Engine running and attached, required manual updates, and was not very... extensible, I guess you would say. When the Dalamud plugin system came around and I had experience with plugins, I became tired of this silly script and instead wrote a plugin that would do the same thing - but all the time. No matter what you were doing, when you loaded the game, it would begin logging paths, and simply writing them to a text file. This was a good enough replacement at the time. It provided an easy-to-use interface that allowed you to see in real-time which paths were being loaded, and wrote them to a file as well for import into a &amp;quot;hash list database&amp;quot; or other tools.&lt;/p&gt;
&lt;h2 id=&quot;reslogger2&quot;&gt;ResLogger2&lt;/h2&gt;
&lt;p&gt;Fast forward a while, and I decided that path collecting could be amplified if it was crowdsourced. I built a small API in Python using Flask and Postgres that would accept a request containing a number of paths, and store it into a database for export later. The difficult part was ensuring that paths actually &amp;quot;existed&amp;quot; - modding was a common pastime in FFXIV, and modders had become privy to the fact that they could technically store their files at &lt;em&gt;any&lt;/em&gt; file path, and FFXIV would request it as long as it was referenced properly. Client-side validation would still pass, as the main method of modding would outright modify your index files in order to function. This would result in my API being fed game paths that didn&#39;t actually exist - poisoned data, so to speak. There&#39;s no auth or user validation, so it&#39;s not as easy as just removing all paths provided by a specific user. The system needed to read fresh, valid index files on the API side.&lt;/p&gt;
&lt;p&gt;I achieved this with extremely simple index file reading code in Python and a bash script to manually sync the index files (remember, that&#39;s all we actually need to determine if a path exists) up to the server, which, upon restarting, would read these files into memory for quick &amp;quot;existence&amp;quot; checks. Of course, a free, open-source crowdsourcing service should provide its data freely, so I had a cronjob perform a CSV-format dump of the database every night. This simple deployment consisted of the Python web service hosted directly through Flask and a Postgres server next to it, spun up via &lt;a href=&quot;https://github.com/perchbirdd/ResLogger2/blob/5ee4ecc96281f8c8cb9bf14074e5303fa59b7ca5/ResLogger2.Web/docker-compose.yml&quot;&gt;docker-compose&lt;/a&gt;. In development, this worked... fine for testing, as I could spin up the DB in a container, and run the API directly on my machine for a quick development loop. To deploy, I would switch my shell from PowerShell to WSL2 and run a script that would use rsync to copy all of my source up to the server. On the server, I would SSH in and restart the docker-compose stack by rebuilding the API image directly on the deployment server.&lt;/p&gt;
&lt;h2 id=&quot;asp-net&quot;&gt;ASP.NET&lt;/h2&gt;
&lt;p&gt;I quickly got fed up with uploading index files to the server every. single. patch. Isn&#39;t there a way I could do this automatically??? Well, no. There wasn&#39;t. I had to wait until a good friend &lt;a href=&quot;https://bsky.app/profile/lumi.zip&quot;&gt;Lumi&lt;/a&gt; developed &lt;a href=&quot;https://thaliak.xiv.dev&quot;&gt;Thaliak&lt;/a&gt;, which polls XIV login servers and provides an API for checking for updates. At this point, there was already battle-tested code for reading XIV patch files in &lt;a href=&quot;https://github.com/goatcorp/FFXIVQuickLauncher&quot;&gt;XIVLauncher&lt;/a&gt; (which, coincidentally, Lumi extracted and placed on NuGet), but this was in C#, meaning a rewrite was necessary.&lt;/p&gt;
&lt;p&gt;ASP.NET is significantly more complicated than Flask was. While I&#39;m not the most competent Python programmer, Flask was pretty easy to spin up the original API design in. Maybe I&#39;m giving it too much credit, because the system itself became much more complicated when moving to ASP.NET as well.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;th&gt;C#&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Path existence&lt;/td&gt;
&lt;td&gt;Read index files on startup&lt;/td&gt;
&lt;td&gt;Hydrated database with hash components correlated between index1 and index2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Updates&lt;/td&gt;
&lt;td&gt;Manually copied index files up to the server&lt;/td&gt;
&lt;td&gt;Quartz job performing automatic updates by storing latest game versions in database and checking against Thaliak&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Path list export&lt;/td&gt;
&lt;td&gt;Postgres dump in CSV format&lt;/td&gt;
&lt;td&gt;Quartz job performing export in 3 forms, both zipped and gzipped for automated use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visibility&lt;/td&gt;
&lt;td&gt;A single link passed around the XIV community&lt;/td&gt;
&lt;td&gt;A website with descriptions of the offered export formats, plus code samples for consuming them&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logging&lt;/td&gt;
&lt;td&gt;docker compose logs?&lt;/td&gt;
&lt;td&gt;Seq log forwarding with dashboards and exception notifications to Telegram&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One thing did not change... deployment. Updates to the service were still deployed by rsync&#39;ing all of my code up to the server and re-building the containers. Now I&#39;m tired of that.&lt;/p&gt;
&lt;h1 id=&quot;deployment-shenanigans&quot;&gt;Deployment Shenanigans&lt;/h1&gt;
&lt;h2 id=&quot;whats-the-problem&quot;&gt;What&#39;s the problem?&lt;/h2&gt;
&lt;p&gt;The setup, as I&#39;m writing this, is as follows. ResLogger2 is a monorepo with a common library, local development tools, the web service, and the Dalamud plugin all in one repository. The plugin deployment is fine, as the automated build system for those is just provided the path to the plugin project. The common repository is fine. Local tools are not committed to the repository, as it has about 3000 lines of testing code to hydrate the original database. I haven&#39;t cleaned and committed any of that because the minimum code needed is already implemented in the common library. It&#39;s pretty much just a testbed. The web service has two uncommitted appsettings files for ASP.NET configuration, because I didn&#39;t want to leak any secrets and I constantly moved from defining them in the appsettings, in the .env file, or directly in the docker compose file. My .env.prod file for production deployment exists only on my Desktop and the server. The docker compose file for production exists only on... the server. I sync this to the server using - you guessed it - an uncommitted bash script that references an SSH key that is once again, only on my Desktop. The state of things is not great.&lt;/p&gt;
&lt;p&gt;As of right now, not only can the code on the repository be completely different than the code on the server, but that can also be different than the code on my Desktop. I can only deploy from my Desktop unless I grab the SSH key and sync script and bring them over to another system - another manual process, since they&#39;re in .gitignore to once again prevent secrets leaks and to keep the repo clean. This is not even considering actually deploying - rebuilding the container image every single time (this means compiling and publishing the executable for the service) is so obnoxious, and takes up valuable space on layers that the production server should never even need to store. I don&#39;t want it to &lt;em&gt;just work&lt;/em&gt; anymore. I want it to work &lt;em&gt;well&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;what-do-we-want&quot;&gt;What do we want?&lt;/h2&gt;
&lt;p&gt;I knew ResLogger2, as my first web service, was going to be a huge learning experience. I built the client application around the idea that I may need to take the web service down for unknown periods of time for maintenance, troubleshooting, debugging, the growing pains. Web service failures on the client side are almost completely ignored and are completely transparent to the user. It&#39;s just crowdsourcing, after all. I am glad I did this. It makes server maintenance much less stressful.&lt;/p&gt;
&lt;p&gt;My ideal workflow is as follows: I have the plugin pointing at a local endpoint for development. I would likely restore a production DB backup to the local container for development. I can see a purpose for three different configurations for local development, all with zero friction: DB in container, API locally. DB in container, API in container with hot reload. DB in container, API in container, built in Release like production. This is, in my opinion, the ideal set of development stacks, because things just always go wrong. I constantly find myself trying to figure out why, when running both services in their containers, I can no longer connect to the database, but outside of the container, the API can connect to the database just fine. For actual deployment, I imagine having the ResLogger2.Web repository split out of everything else. I don&#39;t care if I have to submodule or NuGet the common library, both are sufficient. I&#39;d like two branches - main for production, &lt;code&gt;stg&lt;/code&gt; for builds that should be deployed to production-like environments for testing and verifying service startup and basic functionality. &lt;code&gt;stg&lt;/code&gt; deploys every commit. &lt;code&gt;main&lt;/code&gt; deploys commits tagged with a version number, and makes a release. Certificates are handled automatically on both environments. There are no extraneous files inside the repository. No bash scripts to run. No mission-critical files are in .gitignore for fear of leaking something important.&lt;/p&gt;
&lt;p&gt;I think that&#39;s a reasonable goal.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The first thing that needs to be handled is local development. I think we&#39;ll need multiple compose files in order to do what we&#39;re looking to do. However, the repository needs some handling first.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/Wh9rzcp_fa-1171.avif 1171w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/Wh9rzcp_fa-1171.webp 1171w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/Wh9rzcp_fa-1171.png&quot; alt=&quot;The ResLogger2 repo, with a folder for Common, a folder for the Plugin, and a folder for Web. There is a .dockerignore file, an .env.dev file, and a docker-compose.yml file in the root as well.&quot; width=&quot;1171&quot; height=&quot;807&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m going to go with this setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;perchbirdd GitHub
├─ ResLogger2.Common
├─ ResLogger2.Plugin
│  ├─ ResLogger2.Common
├─ ResLogger2.Web
│  ├─ ResLogger2.Common
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When there&#39;s an update pushed to common, just update the submodule and push that. I think we can close the book on ResLogger2.Common for now.&lt;/p&gt;
&lt;p&gt;The next thing to handle is appsettings.json. Here are the current versions of those files:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;appsettings.Development.json&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Kestrel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;EndPoints&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Http&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://*:5103&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Https&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://*:7281&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;ExportDirectory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;testing/live/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;BackupDirectory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;testing/&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;appsettings.json&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Kestrel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;EndPoints&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Http&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://*:80&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Https&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;Url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://*:443&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;LettuceEncrypt&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;AcceptTermsOfService&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;DomainNames&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rl2.perchbird.dev&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;EmailAddress&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;[omitted]&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Serilog&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Using&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Serilog.Sinks.Console&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Serilog.Sinks.File&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;MinimumLevel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Default&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Debug&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Override&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Microsoft.EntityFrameworkCore&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Microsoft.AspNetCore&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Quartz.Core&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;WriteTo&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Console&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;outputTemplate&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;File&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/usr/src/app/persistence/web/logs/log-.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rollingInterval&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Day&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;outputTemplate&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Seq&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;serverUrl&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://logs.perchbird.dev:5341&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;apiKey&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;[omitted]&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Enrich&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FromLogContext&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Application&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ResLogger2&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;AllowedHosts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;ExportDirectory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/usr/src/app/persistence/web/live/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;BackupDirectory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/usr/src/app/persistence/web/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;CertDirectory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/usr/src/app/persistence/web/cert/&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe you can see why I didn&#39;t want to commit this guy! As you can see, it needs to access a few directories. These are mapped to the host, not volumes, in the docker-compose:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .
      &lt;span class=&quot;token key atrule&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ResLogger2.Web/Dockerfile
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./deploy/persistence/web/&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/usr/src/app/persistence/
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5103:5103&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;7281:7281&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./.env.dev
    &lt;span class=&quot;token key atrule&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; db
  &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bitnami/postgresql&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14.6.0
    &lt;span class=&quot;token key atrule&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1002&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5432:5432&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./deploy/persistence/db/&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/bitnami/postgresql
    &lt;span class=&quot;token key atrule&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./.env.dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It references &lt;code&gt;.env.dev&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-a&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-a&quot;&gt;COMPOSE_PROJECT_NAME=rl2dev
ASPNETCORE_ENVIRONMENT=Development
POSTGRESQL_USERNAME=rl2
POSTGRESQL_PASSWORD=rl2
PGPASSWORD=${POSTGRESQL_PASSWORD}
POSTGRESQL_DATABASE=rl2
POSTGRESQL_HOST=db
POSTGRESQL_PORT=5432
RL2_CONNSTRING=Host=${POSTGRESQL_HOST}:${POSTGRESQL_PORT};Database=${POSTGRESQL_DATABASE};Username=${POSTGRESQL_USERNAME};Password=${POSTGRESQL_PASSWORD}
TZ=America/New_York&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the production docker-compose (&lt;code&gt;docker-compose.prod.yml&lt;/code&gt;) is the exact same, except it references &lt;code&gt;.env.prod&lt;/code&gt;, which is the exact same as &lt;code&gt;.env.dev&lt;/code&gt;, except it has the production database password in it. In reality, there is absolutely nothing sensitive about a bunch of file system paths for a video game, but I&#39;m trying to learn here.&lt;/p&gt;
&lt;h3 id=&quot;the-testcontainers-experiment&quot;&gt;The Testcontainers Experiment&lt;/h3&gt;
&lt;p&gt;I&#39;ve always wanted to try out Testcontainers, but I don&#39;t have any tests at all for my personal projects. So instead of writing tests for Testcontainers, I was thinking to just use Testcontainers at runtime! My idea was this: rather than having to configure, maintain, and run yet another docker compose file for API-outside-of-container development, I could just spin up and shut down postgres &lt;em&gt;with the application&lt;/em&gt; using Testcontainers:&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Environment&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsDevelopment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseSwagger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseSwaggerUI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; pgVolume &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;VolumeBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pg_data&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithReuse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; pg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;PostgreSqlBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithDatabase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;rl2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithUsername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;rl2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;rl2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithPortBinding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithVolumeMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pgVolume&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/var/lib/postgresql/data&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithWaitStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Wait&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ForUnixContainer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UntilMessageIsLogged&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;database system is ready to accept connections&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;StartAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureAwait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked great, actually. I temporarily set up a bind mount and restored from a production database backup. I got a few errors - expected, as I didn&#39;t drop the database, and EF Core had already created everything for me when booting the application. I didn&#39;t spend too much time here. Despite the success, I feel that it&#39;s both too coupled and too de-coupled. Too coupled to the application, and too de-coupled from the rest of the so-called infrastructure. However, knowing that Testcontainers works flawlessly even outside of tests is a great strategy for super-quick iteration I&#39;ll probably use in the future.&lt;/p&gt;
&lt;h2 id=&quot;back-to-it&quot;&gt;Back to it&lt;/h2&gt;
&lt;p&gt;So... what&#39;s the best path forward?  For local development, I think we can do something like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove all non-defaults from &lt;code&gt;launchsettings.json&lt;/code&gt;. This is used when launching the application from an IDE or on the development machine. It also complicates things, as it is yet another place to specify a set of variables that can impact how the application runs.&lt;/li&gt;
&lt;li&gt;Rely on the user for local development. Who really cares if you need to spin up a container with &lt;code&gt;docker compose up db&lt;/code&gt; once every development session? This way, we can use the same compose file for local development with and without containers, and have a separate docker stack file for automated deployments.&lt;/li&gt;
&lt;li&gt;Implement heavy use of appsettings and environment variables for environment controls. Let&#39;s be real - the development environment doesn&#39;t need log aggregation or certs. But it will require an export directory and a backup directory for proper execution. We can take advantage of appsettings inheritance, ASP.NET environments, and environment variables to streamline the configuration between local-out-of-container, local-in-container, staging, and production. Automated deployments will use docker swarm/stack - and thus we can use configs and secrets for those.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s start with docker. We can modify our existing docker containers (which use rootless bitnami) to use the standard postgres container. Let&#39;s set the development docker-compose up so that it also hot-reloads the web service as it changes.&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rl2_dev
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; mcr.microsoft.com/dotnet/sdk&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9.0&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/build/
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /build/src/bin/
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /build/src/obj/
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /build/deps/ResLogger2.Common/src/obj/
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /build/deps/ResLogger2.Common/src/bin/
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./web_data/&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/web_data/
    &lt;span class=&quot;token key atrule&quot;&gt;working_dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /build
    &lt;span class=&quot;token key atrule&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dotnet watch run &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;project src/ResLogger2.Web.csproj
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5103:5103&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;7281:7281&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; db
    &lt;span class=&quot;token key atrule&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; Development.env

  &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14.15&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine3.21
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5432:5432&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; pg_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/var/lib/postgresql/data/
    &lt;span class=&quot;token key atrule&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; Development.env

&lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;pg_data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with the &lt;code&gt;Development.env&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-env&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-env&quot;&gt;DOTNET_ENVIRONMENT=Development
POSTGRES_USER=rl2
POSTGRES_PASSWORD=rl2
RL2_CONNSTRING=Host=db:5432;Database=rl2;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This runs both services with live code changes, as containers in Docker. Note that we&#39;re mapping the current directory to /build/ in the container - this is what drives the hot reload. We&#39;re also mapping some directories as volumes that we have on both the host and the container, and you might wonder why. Dotnet will place some platform/system-specific files into &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;bin&lt;/code&gt; that assist in building the application. These files also assist IDEs with analysis and other things that I don&#39;t know of. But what I do know is that the files places into these folders by the container are 1. unnecessary for us on Windows, and 2. break our view of the source code on the host. So, we simply map them as a volume, kind of to say, &amp;quot;I know this is inside of a folder I&#39;ve already mapped, but just kinda ignore that guy.&amp;quot; Finally, we have a web_data bind mount that we can use inside &lt;code&gt;appsettings.Development.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Kestrel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;EndPoints&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Http&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://*:5103&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;ExportDirectory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/web_data/export/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;BackupDirectory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/web_data/backup&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way the containerized, hot-reloading application will plop its output (from export and backup) into the host filesystem, so we don&#39;t have to copy stuff out of the container if we need to examine the output.&lt;/p&gt;
&lt;p&gt;And with just a single &lt;code&gt;docker compose up&lt;/code&gt; - we have our application stack running:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/eo5DXWpbBS-2441.avif 2441w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/eo5DXWpbBS-2441.webp 2441w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/eo5DXWpbBS-2441.png&quot; alt=&quot;Image of Rider with docker-compose.yml open, with the ResLogger2 stats page open in Firefox in the foreground. The table of stats is empty.&quot; width=&quot;2441&quot; height=&quot;1334&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The stats page displaying properly showcases that database access is available. There&#39;s no data, so the table is empty, but the connection is working. The only thing I&#39;m not completely happy with is the speed and workflow of dotnet watch from within the docker container. I may experiment with docker watch at some point, but this is perfectly usable for now. Let&#39;s move on to deployment.&lt;/p&gt;
&lt;h2 id=&quot;preparing-for-deployment&quot;&gt;Preparing for Deployment&lt;/h2&gt;
&lt;p&gt;Since we want our automation to handle the deployment from just a commit, we&#39;ll want to make sure our application code is sound prior to even bothering to deploy. We&#39;ll start with a simple compile workflow that&#39;s required for all other jobs.&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout repository
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v4
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;submodules&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; recursive
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Setup dotnet
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;dotnet@v4
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;dotnet-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;9.x.x&#39;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Restore
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dotnet restore
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Compile
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dotnet build &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;no&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;restore &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;configuration Release&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Easy enough. If this job fails, the rest of the jobs won&#39;t even run as long as we specify their dependency properly. Let&#39;s build the image... oh, wait. We didn&#39;t discuss our Dockerfile.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-Dockerfile&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /build
COPY ../src src
COPY ../deps deps
RUN dotnet publish &quot;src/ResLogger2.Web.csproj&quot; -c Release -o /app/publish

FROM base AS final
ENV TZ=America/New_York
WORKDIR /app
COPY --from=build /app/publish .
ENTRYPOINT [&quot;dotnet&quot;, &quot;ResLogger2.Web.dll&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A simple multi-stage build. We use &lt;code&gt;dotnet/sdk&lt;/code&gt; and copy in &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;deps&lt;/code&gt;. Both ResLogger2.Web and ResLogger2.Common&#39;s &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;obj&lt;/code&gt; folders are in the &lt;code&gt;.dockerignore&lt;/code&gt; file, so they&#39;re ignored under all circumstances - this keeps the build fast since no transfer takes place. Oh yeah, and we also have &lt;code&gt;web_data&lt;/code&gt; in there, so any files from testing won&#39;t be copied to the context either. Anyways, we copy our source in, &lt;code&gt;dotnet publish&lt;/code&gt; it, and copy this directory to the final image, based on &lt;code&gt;dotnet/aspnet&lt;/code&gt;. This keeps the image small. It is currently 270MB - considering the &lt;code&gt;dotnet/aspnet&lt;/code&gt; image itself is 223MB, this is acceptable to me.&lt;/p&gt;
&lt;p&gt;Moving on to build inside the action! Wait a second, we don&#39;t want to tag an image for staging with &lt;code&gt;latest&lt;/code&gt;... and we don&#39;t want to deploy the &lt;code&gt;latest&lt;/code&gt; image, probably built from &lt;code&gt;main&lt;/code&gt;, to staging... So we have to generate the tag beforehand. Unfortunately, we also need to compute the environment in a roundabout way, as we only want &lt;code&gt;staging&lt;/code&gt; commits to deploy to &lt;code&gt;staging&lt;/code&gt;, and &lt;code&gt;main&lt;/code&gt; commits to deploy to &lt;code&gt;production&lt;/code&gt;. I wanted &lt;code&gt;main&lt;/code&gt; to only deploy to production when tagged with a version, but it would be an utter nightmare to try to determine &amp;quot;is this action running due to a push of a tag onto main?&amp;quot; so I ditched that desire. Here&#39;s the action &lt;code&gt;identify&lt;/code&gt; that sets some vars for later:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;identify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;fetch-depth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Set deployment environment
        &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; identify_env
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          if [[ &quot;${{ github.ref_name }}&quot; == &quot;main&quot; &amp;amp;&amp;amp; &quot;${{ github.ref_type }}&quot; == &quot;branch&quot; ]]; then
            echo &quot;environment=Production&quot; &gt;&gt; $GITHUB_OUTPUT
            echo &quot;image_tag=latest&quot; &gt;&gt; $GITHUB_OUTPUT
          elif [[ &quot;${{ github.ref_name }}&quot; == &quot;staging&quot; &amp;amp;&amp;amp; &quot;${{ github.ref_type }}&quot; == &quot;branch&quot; ]]; then
            echo &quot;environment=Staging&quot; &gt;&gt; $GITHUB_OUTPUT
            echo &quot;image_tag=staging&quot; &gt;&gt; $GITHUB_OUTPUT
          else
            echo &quot;environment=None&quot; &gt;&gt; $GITHUB_OUTPUT
            echo &quot;image_tag=None&quot; &gt;&gt; $GITHUB_OUTPUT
          fi&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; steps.identify_env.outputs.environment &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;image_tag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; steps.identify_env.outputs.image_tag &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can move on:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;push-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; compile
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; identify
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout repository
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v4
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;submodules&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; recursive
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Log in to the Container registry
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; docker/login&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;action@v3
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//ghcr.io
          &lt;span class=&quot;token key atrule&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.actor &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.GITHUB_TOKEN &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; docker/build&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;push&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;action@v6
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./src/Dockerfile
          &lt;span class=&quot;token key atrule&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .
          &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
            ghcr.io/perchbirdd/reslogger2:${{ needs.identify.outputs.image_tag }}
            ghcr.io/perchbirdd/reslogger2:${{ github.sha }}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will build the image and push it to the GitHub container registry with the tag of &lt;code&gt;staging&lt;/code&gt; if the job is run from a commit to &lt;code&gt;staging&lt;/code&gt;, or &lt;code&gt;latest&lt;/code&gt; if the tag is run from a commit to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&#39;s where things get dicey. Here was the original plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set environment secrets and variables on the GitHub UI. That is, username, hostname, database password, log aggregator API key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the action,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Log in to Tailscale&lt;/li&gt;
&lt;li&gt;SSH (thanks to Tailscale) into ${{ vars.ENV_USER }}@${{ vars.ENV_HOSTNAME }}&lt;/li&gt;
&lt;li&gt;Place some files onto the filesystem? The docker-compose? The .env file... ?&lt;/li&gt;
&lt;li&gt;docker compose up! but remotely&lt;/li&gt;
&lt;li&gt;Everyone is happy&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;tailscale-didnt-like-me-for-a-while&quot;&gt;Tailscale didn&#39;t like me for a while&lt;/h3&gt;
&lt;p&gt;I love Tailscale. I really do. I thought it would be perfect for this CI. Spin up an ephemeral runner with an auth key. Connect to Tailscale. Connect to the host to deploy to. But I went down an hours-long rabbit hole just trying to get SSH to work.&lt;/p&gt;
&lt;p&gt;From the action, &lt;code&gt;tailscale ssh user@rl2-stg&lt;/code&gt; worked fine. But &lt;code&gt;ssh user@rl2-stg&lt;/code&gt; provided me with the dreaded &lt;code&gt;Host key verification failed.&lt;/code&gt; every time. I was planning on utilizing some functionality that I wouldn&#39;t be able to use &lt;code&gt;tailscale ssh&lt;/code&gt; for specifically, so this was a problem. It took me a number of hours to come up with the following actions step which allows &lt;code&gt;ssh&lt;/code&gt; to function to other tailscale nodes:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Configure SSH
  &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    cat &amp;lt;&amp;lt;EOF &gt;&gt; ~/.ssh/config
    Host ${{ vars.ENV_HOSTNAME }}
        User ${{ vars.ENV_USER }}
        Hostname ${{ vars.ENV_HOSTNAME }}
        StrictHostKeyChecking no
        UserKnownHostsFile=/dev/null
    EOF
    chmod 600 ~/.ssh/config&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;Many hours? This is simple stuff, perch!&amp;quot; you might say. Yes. It is simple stuff. However, while testing this out, I learned about &lt;em&gt;tags&lt;/em&gt; in Tailscale for the first time. I had to, as they&#39;re a requirement for a lot of the automation and permissions stuff. What I didn&#39;t know is that tagging a node &lt;em&gt;removes you as the owner&lt;/em&gt;, your ACLs &lt;em&gt;might not permit the admin to connect to them anymore&lt;/em&gt;, and to un-tag the node &lt;em&gt;you have to log in and re-auth the node&lt;/em&gt;. See where this is going? So I had to detour for a while and learn just enough Tailscale ACL configuration to be able to SSH back into the server I tagged. Yes, I could have just SSHed in and re-auth&#39;d, but I don&#39;t permit any connections from the internet on port 22 on any of my VPS machines, so I&#39;d have to go into the cloud provider&#39;s panel and add the rule back and... now that I think about it, maybe that would have been the easier way. Whatever.&lt;/p&gt;
&lt;h2 id=&quot;waiter-more-context-please&quot;&gt;Waiter, more Context, please!&lt;/h2&gt;
&lt;p&gt;Here&#39;s the deploy job:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
  &lt;span class=&quot;token key atrule&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;compile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; identify&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; push&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; needs.identify.outputs.environment &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;concurrency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; deploy&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; needs.identify.outputs.environment &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout repository
      &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v4
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Set Deployment Environment
      &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; deployment_env
      &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
        if [[ &quot;${{ needs.identify.outputs.environment }}&quot; == &quot;None&quot; ]]; then
          exit 1
        else
          echo &quot;environment=${{ needs.identify.outputs.environment }}&quot; &gt;&gt; $GITHUB_ENV
        fi&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Connect to Tailscale
      &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; tailscale/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;action@v2
      &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;oauth-client-id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.TS_OAUTH_CLIENT_ID &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;oauth-secret&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.TS_OAUTH_SECRET &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; tag&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ci
        &lt;span class=&quot;token key atrule&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ssh
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Configure SSH
      &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        cat &amp;lt;&amp;lt;EOF &gt;&gt; ~/.ssh/config
        Host ${{ vars.ENV_HOSTNAME }}
            User ${{ vars.ENV_USER }}
            Hostname ${{ vars.ENV_HOSTNAME }}
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
        EOF
        chmod 600 ~/.ssh/config&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Hydrate env file
      &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
        source $environment.env
        echo &quot;POSTGRES_PASSWORD=${{ secrets.DB_PASS }}&quot; &gt;&gt; $environment.env
        echo &quot;RL2_CONNSTRING=Host=db:5432;Database=rl2;Username=${POSTGRES_USER};Password=${{ secrets.DB_PASS }}&quot; &gt;&gt; $environment.env
        echo &quot;Serilog__WriteTo__1__Args__apiKey=${{ secrets.SEQ_API_KEY }}&quot; &gt;&gt; $environment.env&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy with Docker Stack
      &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
        docker context create remote --docker &quot;host=ssh://${{ vars.ENV_USER }}@${{ vars.ENV_HOSTNAME }}&quot;
        docker context use remote
        docker stack deploy -c docker-stack.$environment.yml rl2-$environment&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, what are we doing?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ensure we&#39;ve completed the steps &lt;code&gt;compile&lt;/code&gt;, &lt;code&gt;identify&lt;/code&gt;, and &lt;code&gt;push-image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the environment using the output of &lt;code&gt;identify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the concurrency level using a label unique to each environment, so we don&#39;t try to deploy twice at the same time&lt;/li&gt;
&lt;li&gt;Fail fast if we somehow don&#39;t have a deployment environment set properly&lt;/li&gt;
&lt;li&gt;Checkout the repository&lt;/li&gt;
&lt;li&gt;Log in to Tailscale using repository secrets&lt;/li&gt;
&lt;li&gt;Configure SSH to bypass host key verification&lt;/li&gt;
&lt;li&gt;Place secrets that the runner has access to into the .env file for the provided environment&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;docker context&lt;/code&gt; and set it as the current context, and finally, &lt;code&gt;docker stack deploy&lt;/code&gt; with the environment&#39;s stack file and the environment&#39;s name. It&#39;s done!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Step 8 and 9 are the most interesting to me. In order to keep the repository clean and still be able to commit every file necessary for a deployment, we hydrate the env file with secrets on the runner, accessible by the runner. We also source the env file first, because &lt;em&gt;docker stack does not interpolate vars in env files!&lt;/em&gt; You might say, &amp;quot;you&#39;re using docker swarm/stack anyways, so why not use &lt;code&gt;secrets&lt;/code&gt;? And the answer is that secrets are a file. That kind of sucks. I would have to modify the application in a very odd way to support it. I get why, it just doesn&#39;t work well for the technologies I&#39;m using. There may be a more idiomatic docker way to get ASP.NET to utilize the stack secrets, but maybe I&#39;ll do that another time.&lt;/p&gt;
&lt;p&gt;Finally, I&#39;ve set up DNS to point rl2-stg.perchbird.dev to the appropriate address and added Caddy to the stack to handle HTTPS and reverse proxying to the web service:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-stack.Staging.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  
  &lt;span class=&quot;token key atrule&quot;&gt;caddy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; caddy&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;80:80&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;443:443&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; caddy_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/data
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; caddy_config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/config
    &lt;span class=&quot;token key atrule&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;caddy reverse-proxy --from rl2-stg.perchbird.dev --to http://web:80&quot;&lt;/span&gt;
  
  &lt;span class=&quot;token key atrule&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ghcr.io/perchbirdd/reslogger2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;staging
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; web_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/web_data/
    &lt;span class=&quot;token key atrule&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; Staging.env
    &lt;span class=&quot;token key atrule&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; db

  &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14.15&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine3.21
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5432:5432&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; pg_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/var/lib/postgresql/data/
    &lt;span class=&quot;token key atrule&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; Staging.env

&lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;web_data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;pg_data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;caddy_data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;caddy_config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The stack is very simple. I&#39;ve gotten pretty much where I want everything to be with this setup:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/6tLKk-Cd9S-1748.avif 1748w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/6tLKk-Cd9S-1748.webp 1748w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/6tLKk-Cd9S-1748.png&quot; alt=&quot;The ResLogger2 stats page loaded from https://rl2-stg.perchbird.dev, with an empty table. In the background is the output of docker stack ps rl2-Staging, which shows three containers: db, web, and caddy.&quot; width=&quot;1748&quot; height=&quot;953&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;With just a commit to staging, I can ensure my code compiles properly, build and push a Docker image, and deploy to either environment, Staging or Production. There are no uncommitted latent files in the repository, nor are there any secrets being committed. I can clone the repo on a fresh machine, and as long as I can log into GitHub, I can redeploy the service. I also don&#39;t even have to run the service locally - I can work out of Staging and have CI deploy my changes, since it only takes a minute or two. Docker Swarm mode gives us a number of cool features. We aren&#39;t using configs or secrets in this stack (yet?) but we do get rolling deployments and rollback for free. The stack will continue using healthy containers until the new deployment&#39;s containers are healthy, and we can rollback a service to the previous deployment with a single command. And finally, we can add replication and clustering to the stack with practically zero effort if we want.&lt;/p&gt;
&lt;p&gt;I am very happy with this!&lt;/p&gt;
&lt;h2 id=&quot;armed-and-dangerous&quot;&gt;ARMed and Dangerous&lt;/h2&gt;
&lt;p&gt;There is one fatal flaw here: ResLogger2&#39;s production system is a free &lt;em&gt;arm64&lt;/em&gt; VPS running on Oracle Cloud. The images that CI is producing are built only for amd64. Thankfully, resolving this is easy. We just add two steps to set up QEMU and buildx before building the image, then we add &lt;code&gt;platforms: linux/arm64,linux/amd64&lt;/code&gt; and we&#39;re all set...&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/GYNQbOKaIw-351.avif 351w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/GYNQbOKaIw-351.webp 351w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/GYNQbOKaIw-351.png&quot; alt=&quot;GitHub Actions push-image step, in progress, with 2h 7m 55s elapsed&quot; width=&quot;351&quot; height=&quot;79&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Oh no. This is going to be an entire other thing, huh.&lt;/p&gt;
&lt;p&gt;It seems like many others have encountered this exact thing, and switched to... running build matrices? I mean, running them at the same time could save maybe 2 minutes, but the time consumer is not &amp;quot;please run these at the same time&amp;quot;, it&#39;s the process of creating the image (from what I can tell). I don&#39;t really understand how others are building complex images in 45 minutes, but that is not a problem for me to solve right now. It seems that a number of people build disparate images with architecture tags, then combine them into a tagged manifest that contains both. This works if you&#39;re running the builds at the same time via matrices, but it also works for &lt;em&gt;multiple builds on separate runners&lt;/em&gt;. Huh. Where do I know where I can get an arm64 machine with plenty of processing power to spare for a self-hosted runner? &lt;a href=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/#armed-and-dangerous&quot;&gt;Oh, right!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I set up the GitHub runner script on the ResLogger2 production system &lt;a href=&quot;https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#hardening-for-self-hosted-runners&quot;&gt;much to GitHub&#39;s dismay.&lt;/a&gt; I&#39;ll probably do a follow-up on this either transforming the action or hardening the runner further - both would be entertaining in my opinion. For now, since I don&#39;t expect many, if not any pull requests, I have set the actions on this repository to prevent any workflow runs without approval. Regardless, I can now run two jobs, one on GitHub&#39;s runners, one on my own, that create images for their respective architectures. Thankfully, that&#39;s all we need to do- oh.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/_BTQoZ8Y5B-859.avif 859w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/_BTQoZ8Y5B-859.webp 859w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/_BTQoZ8Y5B-859.png&quot; alt=&quot;GitHub action output for &amp;quot;Create SHA manifest and push&amp;quot; with the output &amp;quot;ghcr.io/perchbirdd/reslogger2:3443738bab7569bf5e90d80e62f61996b4857214-amd64 is a manifest list&amp;quot;&quot; width=&quot;859&quot; height=&quot;154&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;So, it looks like some change that they made with how the &lt;code&gt;docker/build-push-action&lt;/code&gt; creates/pushes images. We have to turn &lt;code&gt;provenance: false&lt;/code&gt;. If I were doing something important, I would find another way around this. But since this is a hobby project intended for myself to use and run, I don&#39;t mind turning off this option. But remember: SBOM, provenance, and attestation is very useful. That being said,&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/sa10GEW5mk-925.avif 925w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/sa10GEW5mk-925.webp 925w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.perchbird.dev/posts/modernizing-deployment/sa10GEW5mk-925.png&quot; alt=&quot;The OS/Arch tab of the ResLogger2 image pane on GitHub, showing an image for linux/amd64 as well as linux/arm64.&quot; width=&quot;925&quot; height=&quot;458&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;There we go!&lt;/p&gt;
&lt;h2 id=&quot;finalizing-it&quot;&gt;Finalizing it&lt;/h2&gt;
&lt;p&gt;Let&#39;s get production ready. Currently, ResLogger2 runs a docker compose setup. We can take down the compose completely, then bring up the db service to run an export.&lt;/p&gt;
&lt;pre class=&quot;language-_&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-_&quot;&gt;ubuntu@main:~/app$ docker-compose -f docker-compose.prod.yml -p rl2 down --remove-orphans
[+] Running 3/3
 ⠿ Container rl2-web-1  Removed                                                                   0.3s
 ⠿ Container rl2-db-1   Removed                                                                   0.2s
 ⠿ Network rl2_default  Removed                                                                   0.2s
ubuntu@main:~/app$ sudo docker compose -f /home/ubuntu/app/docker-compose.prod.yml -p rl2 up db -d
[+] Running 1/1
 ✔ Container rl2-db-1  Started                                                                    0.2s
ubuntu@main:~/app$ sudo docker compose -f /home/ubuntu/app/docker-compose.prod.yml -p rl2 exec db pg_dump -U rl2 -F t -f /db_backup/db.backup
ubuntu@main:~/app$ ls deploy/persistence/db_backup/
db.backup&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have an export ready, we can take down this compose entirely. I&#39;ve moved the entire contents here from &lt;code&gt;app&lt;/code&gt; to &lt;code&gt;app_old&lt;/code&gt; for temporary safekeeping. Let&#39;s attempt a production deployment. We do everything the exact same, but slightly adjust the compose stack for production by referencing the &lt;code&gt;Production.env&lt;/code&gt; file and changing the url passed to Caddy. We also add a new &lt;code&gt;pg_backup&lt;/code&gt; volume for transfer in and out of the container - we can restore our database backup through here as well as take backups out from here. I back up the ResLogger2 database dump every day.&lt;/p&gt;
&lt;p&gt;Once it&#39;s deployed (Hooray! Our stack works not only in Production but on arm64!), we can begin the restoration. I&#39;ve blocked incoming traffic so the web service can sit in peace while we prep the database.&lt;/p&gt;
&lt;p&gt;Copy the backup into the container and restore it:&lt;/p&gt;
&lt;pre class=&quot;language-_&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-_&quot;&gt;ubuntu@main:~$ docker cp db.backup rl2-Production_db.1.njzjdiyym6nyh0hkw6pcgsyku:/pg_backup
Successfully copied 235MB to rl2-Production_db.1.njzjdiyym6nyh0hkw6pcgsyku:/pg_backup
ubuntu@main:~$ docker exec -it rl2-Production_db.1.njzjdiyym6nyh0hkw6pcgsyku &quot;/bin/sh&quot;
/ # dropdb -f rl2 -U rl2
/ # createdb -U rl2 -W rl2
Password:
/ # pg_restore -U rl2 -d rl2 /pg_backup/db.backup&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the database is back, and the stats page populates without a problem. There was a slight issue due to some config changes I made regarding the file-serving path inside of the container, but that was my fault. I updated the output path inside the container to remove a subfolder, but didn&#39;t change the links on the download page. Oops!&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;What did we learn here?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to commit everything to a repository without exposing secrets&lt;/li&gt;
&lt;li&gt;How to take advantage of GitHub&#39;s Actions and Container Registry for free for hobby projects (thanks, GitHub!)&lt;/li&gt;
&lt;li&gt;How to build a multi-arch image in GHA without taking 70 years, provided you have an arm64 system available and &lt;a href=&quot;https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners#self-hosted-runner-security&quot;&gt;don&#39;t mind using self hosted runners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to use some neat Docker features for things like remote deployments, rolling deploy and rollbacks, and future proofing (clustering, replication, configs, secrets)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would love to improve on this over time. However, I currently have a few other projects taking up valuable mind space, and I&#39;ve spent too long on this for my brain to continue to focus. You can view the results of this project at &lt;a href=&quot;https://github.com/perchbirdd/ResLogger2.Web&quot;&gt;https://github.com/perchbirdd/ResLogger2.Web&lt;/a&gt;. This post and project was heavily inspired by &lt;a href=&quot;https://www.youtube.com/watch?v=fuZoxuBiL9o&quot;&gt;this video by Dreams of Code.&lt;/a&gt; If you have comments or desperately need to tell me I&#39;m wrong about something, my contact info is in the About section up top. Thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Welcome!</title>
    <link href="https://blog.perchbird.dev/posts/firstpost/" />
    <updated>2024-12-07T00:00:00Z</updated>
    <id>https://blog.perchbird.dev/posts/firstpost/</id>
    <content type="html">&lt;p&gt;I have finally set up a blog. This is where longform things that don&#39;t fit on social media will go. There are some things I&#39;ve done research on or deep-dives into that don&#39;t necessarily fit into a social media post or thread. Plus editing and images are a thing. This also has full support for inserting code and syntax highlighting with no JavaScript, which is really nice. Expect a post with actual content in the near future!&lt;/p&gt;
</content>
  </entry>
</feed>