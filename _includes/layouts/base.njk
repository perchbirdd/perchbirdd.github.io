<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">
		<link rel="alternate" href="feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">

		{#- Uncomment this if you’d like folks to know that you used Eleventy to build your site!  #}
		{#- <meta name="generator" content="{{ eleventy.generator }}"> #}

		{#-
		Plain-text bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. CSS:
			* Add to a per-page bundle using `{% css %}{% endcss %}`
			* Retrieve bundle content using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		2. Or for JavaScript:
			* Add to a per-page bundle using `{% js %}{% endjs %}`
			* Retrieve via `{% getBundle "js" %}` or `{% getBundleFileUrl "js" %}`
		3. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}

		{#- Add an arbitrary string to the bundle #}
		{%- css %}/* This is an arbitrary CSS string added to the bundle */{% endcss %}
		{#- Add the contents of a file to the bundle #}
		{%- css %}{% include "public/css/index.css" %}{% endcss %}
		{#- Or you can add from node_modules #}
		{# {%- css %}{% include "node_modules/prismjs/themes/prism-okaidia.css" %}{% endcss %} #}

		{#- Render the CSS bundle using inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>
		<!-- <style>@import url('https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,500;1,100..900&display=swap');</style> -->
		<style>@import url('https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&display=swap');</style>
		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}

		{#- Add the heading-anchors web component to the JavaScript bundle #}
		{%- js %}{% include "node_modules/@zachleat/heading-anchors/heading-anchors.js" %}{% endjs %}
	</head>
	<body>
		<a href="#skip" class="visually-hidden">Skip to main content</a>

		<header>
			<a href="/" class="home-link">{{ metadata.title }}</a>

			{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
			<nav>
				<h2 class="visually-hidden">Top level navigation menu</h2>
				<ul class="nav">
				{%- for entry in collections.all | eleventyNavigation %}
					<li class="nav-item"><a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a></li>
				{%- endfor %}
				</ul>
			</nav>
		</header>

		<main id="skip">
			<heading-anchors>
				{{ content | safe }}
			</heading-anchors>
		</main>

		<footer>
			<p><em>Built with <a href="https://www.11ty.dev/">{{ eleventy.generator }}</a></em></p>
		</footer>

		<!-- This page `{{ page.url }}` was built on {% currentBuildDate %} -->
		<script type="module" src="{% getBundleFileUrl "js" %}"></script>
		<script>
		// it's hacky but it works i think
		document.addEventListener('DOMContentLoaded', function() {
			const codeBlocks = document.querySelectorAll('pre > code, pre[class*="language-"]');
			
			codeBlocks.forEach(function(block) {
				const pre = block.tagName === 'PRE' ? block : block.parentElement;
				
				if (pre.classList.contains('collapsible-processed')) return;
				
				let language = 'Code';
				const classList = pre.className || block.className || '';
				const langMatch = classList.match(/language-(\w+)/);
				if (langMatch) {
					language = langMatch[1].toUpperCase();
				}
				
				let title = language;
				let prevNode = pre.previousSibling;
				
				while (prevNode) {
					if (prevNode.nodeType === Node.COMMENT_NODE) {
						title = prevNode.textContent.trim();
					} else if (prevNode.nodeType === Node.ELEMENT_NODE && prevNode.textContent.trim() !== '') {
						break;
					}
					prevNode = prevNode.previousSibling;
				}
				
				const wrapper = document.createElement('div');
				wrapper.className = 'collapsible-code-wrapper';
				
				const toggle = document.createElement('button');
				toggle.className = 'code-toggle';
				toggle.innerHTML = `
					<span class="toggle-icon">▼</span>
					<span class="toggle-text">${title}</span>
				`;
				
				const codeContainer = document.createElement('div');
				codeContainer.className = 'code-container';
				
				pre.parentNode.insertBefore(wrapper, pre);
				codeContainer.appendChild(pre);
				wrapper.appendChild(toggle);
				wrapper.appendChild(codeContainer);
				
				toggle.addEventListener('click', function() {
					const isCollapsed = codeContainer.style.display === 'none';
					
					if (isCollapsed) {
						codeContainer.style.display = 'block';
						toggle.querySelector('.toggle-icon').textContent = '▼';
						toggle.querySelector('.toggle-text').textContent = title;
					} else {
						codeContainer.style.display = 'none';
						toggle.querySelector('.toggle-icon').textContent = '▶';
						toggle.querySelector('.toggle-text').textContent = title;
					}
				});
				
				pre.classList.add('collapsible-processed');
			});
		});
		</script>
	</body>
</html>
